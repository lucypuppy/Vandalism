/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.exploitfixer;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.exploitfixer.settings.ExploitFixerMiscSettings;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.exploitfixer.settings.ExploitFixerModSettings;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.exploitfixer.settings.ExploitFixerPacketSettings;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.exploitfixer.settings.ExploitFixerRenderSettings;
import de.nekosarekawaii.vandalism.util.game.ChatUtil;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.s2c.play.ExplosionS2CPacket;
import net.minecraft.network.packet.s2c.play.ParticleS2CPacket;

public class ExploitFixerModule extends AbstractModule implements IncomingPacketListener {

    public final ExploitFixerPacketSettings packetSettings = new ExploitFixerPacketSettings(this);
    public final ExploitFixerRenderSettings renderSettings = new ExploitFixerRenderSettings(this);
    public final ExploitFixerModSettings modSettings = new ExploitFixerModSettings(this);
    public final ExploitFixerMiscSettings miscSettings = new ExploitFixerMiscSettings(this);

    public ExploitFixerModule() {
        super(
                "Exploit Fixer",
                "Fixes exploits that could harm your game or even your computer.",
                Category.EXPLOIT
        );
        this.activateDefault();
        this.markExperimental();
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(IncomingPacketEvent.ID, this);
    }

    @Override
    public void deactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(IncomingPacketEvent.ID, this);
    }

    @Override
    public void onIncomingPacket(final IncomingPacketEvent event) {
        final Packet<?> packet = event.packet;
        if (packet instanceof final ParticleS2CPacket particleS2CPacket) {
            if (this.packetSettings.blockTooManyParticles.getValue()) {
                final int maxParticleCount = this.packetSettings.countToBlockParticles.getValue();
                if (particleS2CPacket.count > maxParticleCount) {
                    ChatUtil.warningChatMessage("Blocked too many particles: " + particleS2CPacket.count);
                    particleS2CPacket.count = maxParticleCount;
                }
            }
        }
        else if (packet instanceof final ExplosionS2CPacket explosionS2CPacket) {
            if (this.packetSettings.blockTooBigExplosions.getValue()) {
                final float maxExplosionPlayerVelocity = this.packetSettings.maxExplosionPlayerVelocity.getValue();
                if (explosionS2CPacket.playerVelocityX > maxExplosionPlayerVelocity || explosionS2CPacket.playerVelocityY > maxExplosionPlayerVelocity || explosionS2CPacket.playerVelocityZ > maxExplosionPlayerVelocity) {
                    ChatUtil.warningChatMessage(
                            "Blocked too big explosion player velocity: " +
                            explosionS2CPacket.getPlayerVelocityX() + ", " +
                            explosionS2CPacket.getPlayerVelocityY() + ", " +
                            explosionS2CPacket.getPlayerVelocityZ()
                    );
                    explosionS2CPacket.playerVelocityX = maxExplosionPlayerVelocity;
                    explosionS2CPacket.playerVelocityY = maxExplosionPlayerVelocity;
                    explosionS2CPacket.playerVelocityZ = maxExplosionPlayerVelocity;
                }
                final float maxExplosionRadius = this.packetSettings.maxExplosionRadius.getValue();
                if (explosionS2CPacket.radius > maxExplosionRadius) {
                    ChatUtil.warningChatMessage("Blocked too big explosion radius: " + explosionS2CPacket.radius);
                    explosionS2CPacket.radius = maxExplosionRadius;
                }
                final int maxExplosionAffectedBlocks = this.packetSettings.maxExplosionAffectedBlocks.getValue();
                if (explosionS2CPacket.affectedBlocks.size() > maxExplosionAffectedBlocks) {
                    ChatUtil.warningChatMessage("Blocked too many explosion affected blocks: " + explosionS2CPacket.affectedBlocks.size());
                    explosionS2CPacket.affectedBlocks = explosionS2CPacket.affectedBlocks.subList(0, maxExplosionAffectedBlocks);
                }
            }
        }
    }

}
