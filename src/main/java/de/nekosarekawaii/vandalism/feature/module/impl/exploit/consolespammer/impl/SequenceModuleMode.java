/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.consolespammer.impl;

import de.florianmichael.rclasses.common.StringUtils;
import de.florianmichael.rclasses.math.timer.MSTimer;
import de.florianmichael.rclasses.pattern.functional.IName;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.selection.EnumModeValue;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.consolespammer.ConsoleSpammerModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import net.minecraft.network.listener.ServerPlayPacketListener;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.util.Hand;

public class SequenceModuleMode extends ModuleMulti<ConsoleSpammerModule> implements PlayerUpdateListener {

    private final IntegerValue maxPacketsPerTick = new IntegerValue(
            this,
            "Max Packets Per Tick",
            "The maximum amount of packets sent per tick.",
            1,
            1,
            10000
    );

    private final IntegerValue delay = new IntegerValue(
            this,
            "Delay",
            "The delay between packets.",
            0,
            0,
            2000
    );

    private final MSTimer delayTimer = new MSTimer();

    private final EnumModeValue<Packet> packet = new EnumModeValue<>(
            this,
            "Packet",
            "The packet to send.",
            Packet.INTERACT,
            Packet.values()
    );

    private enum Packet implements IName {

        INTERACT,
        START_DESTROY_BLOCK,
        ABORT_DESTROY_BLOCK,
        STOP_DESTROY_BLOCK;

        private final String name;

        Packet() {
            this.name = StringUtils.normalizeEnumName(this.name());
        }

        @Override
        public String getName() {
            return this.name;
        }

    }

    public SequenceModuleMode() {
        super("Sequence");
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(PlayerUpdateEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(PlayerUpdateEvent.ID, this);
    }

    @Override
    public void onPrePlayerUpdate(final PlayerUpdateEvent event) {
        if (this.delayTimer.hasReached(this.delay.getValue(), true)) {
            final net.minecraft.network.packet.Packet<ServerPlayPacketListener> packet = switch (this.packet.getValue()) {
                case START_DESTROY_BLOCK -> new PlayerActionC2SPacket(
                        PlayerActionC2SPacket.Action.START_DESTROY_BLOCK,
                        this.mc.player.getBlockPos(),
                        this.mc.player.getHorizontalFacing(),
                        -1
                );
                case ABORT_DESTROY_BLOCK -> new PlayerActionC2SPacket(
                        PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK,
                        this.mc.player.getBlockPos(),
                        this.mc.player.getHorizontalFacing(),
                        -1
                );
                case STOP_DESTROY_BLOCK -> new PlayerActionC2SPacket(
                        PlayerActionC2SPacket.Action.STOP_DESTROY_BLOCK,
                        this.mc.player.getBlockPos(),
                        this.mc.player.getHorizontalFacing(),
                        -1
                );
                default -> new PlayerInteractItemC2SPacket(
                        Hand.MAIN_HAND,
                        -1
                );
            };
            for (int i = 0; i < this.maxPacketsPerTick.getValue(); i++) {
                this.mc.getNetworkHandler().getConnection().send(packet, null, true);
            }
        }
    }

}
