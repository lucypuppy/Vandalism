/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.consolespammer.impl;

import de.nekosarekawaii.vandalism.base.FabricBootstrap;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.StringValue;
import de.nekosarekawaii.vandalism.base.value.impl.selection.EnumModeValue;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.consolespammer.ConsoleSpammerModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import de.nekosarekawaii.vandalism.util.common.IName;
import de.nekosarekawaii.vandalism.util.common.StringUtils;
import de.nekosarekawaii.vandalism.util.game.InventoryUtil;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.CraftRequestC2SPacket;
import net.minecraft.network.packet.c2s.play.RecipeBookDataC2SPacket;
import net.minecraft.util.Identifier;

import java.util.UUID;

public class IdentifierModuleMode extends ModuleMulti<ConsoleSpammerModule> {

    public static final Identifier IDENTIFIER = new Identifier(FabricBootstrap.MOD_ID, UUID.randomUUID().toString().toLowerCase().replace(
            "-", ""
    ));

    private final EnumModeValue<Mode> mode = new EnumModeValue<>(
            this,
            "Mode",
            "The mode of the identifier spammer.",
            Mode.CRAFT_REQUEST,
            Mode.values()
    );

    private final StringValue message = new StringValue(
            this,
            "Message",
            "The custom message to send.",
            "hi"
    );

    private final IntegerValue repeat = new IntegerValue(
            this,
            "Repeat",
            "How often the message should be repeated.",
            1,
            1,
            Short.MAX_VALUE - 1
    );

    public IdentifierModuleMode(final ConsoleSpammerModule parent) {
        super("Identifier", parent);
    }

    @Override
    public void onActivate() {
        if (this.mc.getNetworkHandler().getConnection().channel.isActive()) {
          /*  switch (this.mode.getValue()) {
                case CRAFT_REQUEST -> {
                    this.mc.getNetworkHandler().getConnection().channel.writeAndFlush(new CraftRequestC2SPacket(
                            this.mc.player.currentScreenHandler.syncId,
                            InventoryUtil.createDummyRecipeEntry(IDENTIFIER),
                            true
                    ));
                }
                case RECIPE_BOOK_DATA -> {
                    this.mc.getNetworkHandler().getConnection().channel.writeAndFlush(new RecipeBookDataC2SPacket(
                            InventoryUtil.createDummyRecipeEntry(IDENTIFIER)
                    ));
                }
                default -> {}
            }*/
        }
        this.parent.deactivate();
    }

    public String consoleString() {
        final String text = this.message.getValue();
        return " " + text.repeat(Math.min(this.repeat.getValue(), (PacketByteBuf.DEFAULT_MAX_STRING_LENGTH - 1) / text.length()));
    }

    private enum Mode implements IName {

        CRAFT_REQUEST,
        RECIPE_BOOK_DATA;

        private final String name;

        Mode() {
            this.name = StringUtils.normalizeEnumName(this.name());
        }

        @Override
        public String getName() {
            return this.name;
        }

    }

}
