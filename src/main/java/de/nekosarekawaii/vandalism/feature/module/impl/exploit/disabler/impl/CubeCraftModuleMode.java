/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.impl;

import de.florianmichael.rclasses.math.timer.MSTimer;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.base.event.cancellable.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.base.event.normal.game.TickTimeListener;
import de.nekosarekawaii.vandalism.base.event.normal.network.WorldListener;
import de.nekosarekawaii.vandalism.base.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.DisablerModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import de.nekosarekawaii.vandalism.util.game.PacketUtil;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

public class CubeCraftModuleMode extends ModuleMulti<DisablerModule> implements IncomingPacketListener, WorldListener, OutgoingPacketListener, PlayerUpdateListener, TickTimeListener {

    public CubeCraftModuleMode() {
        super("CubeCraft");
    }

    private int iA, iB, iC, iD, iE, iF;
    private boolean bA, bB, bC, bD, bE, bF;
    private long lA, lB, lC, lD, lE, lF;
    private float fA, fB, fC, fD, fE, fF;
    private double dA, dB, dC, dD, dE, dF;
    private CopyOnWriteArrayList<Packet<?>> packetList1 = new CopyOnWriteArrayList<>();
    private CopyOnWriteArrayList<Packet<?>> packetList2 = new CopyOnWriteArrayList<>();
    private CopyOnWriteArrayList<Packet<?>> packetList3 = new CopyOnWriteArrayList<>();

    private MSTimer timer1 = new MSTimer();
    private MSTimer timer2 = new MSTimer();
    private MSTimer timer3 = new MSTimer();

    private final Queue<Packet<?>> concurrentLinkedQueue = new ConcurrentLinkedQueue<>();

    @Override
    public void onActivate() {
        iA = -1;
        Vandalism.getInstance().getEventSystem().subscribe(this, IncomingPacketEvent.ID,
                OutgoingPacketEvent.ID, PlayerUpdateEvent.ID, TickTimeEvent.ID, WorldLoadEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, IncomingPacketEvent.ID,
                OutgoingPacketEvent.ID, PlayerUpdateEvent.ID, TickTimeEvent.ID, WorldLoadEvent.ID);
    }

    @Override
    public void onIncomingPacket(IncomingPacketEvent event) {}

    @Override
    public void onOutgoingPacket(OutgoingPacketEvent event) {
        if(event.packet instanceof KeepAliveC2SPacket) {
            event.setCancelled(true);
        }
        if (event.packet instanceof CommonPongC2SPacket packet) {
            if (iA <= 0) {
                iA = packet.getParameter();
            }
            event.setCancelled(true);
        }
        if (event.packet instanceof PlayerMoveC2SPacket packet) {
            packet.y = Math.round(packet.y / 0.015625) * 0.015625;
        }
    }

    @Override
    public void onPrePlayerUpdate(PlayerUpdateEvent event) {
        iB++;

        if (iA > 100 && iB > 50) {
            iA++;
            mc.getNetworkHandler().getConnection().channel.writeAndFlush(new PlayerInputC2SPacket(mc.player.sidewaysSpeed, mc.player.forwardSpeed, true, mc.player.input.sneaking));
            PacketUtil.sendImmediately(new CommonPongC2SPacket(-iA), null, true);
            iB = 0;
        }
    }

    @Override
    public void onPreWorldLoad() {
        iA = -1;
    }

    @Override
    public void onPostPlayerUpdate(PlayerUpdateEvent event) {}

    @Override
    public void onTickTimings(TickTimeEvent event) {}
}
