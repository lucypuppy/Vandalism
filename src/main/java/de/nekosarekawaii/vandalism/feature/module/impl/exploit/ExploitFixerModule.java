/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.number.FloatValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.s2c.play.ExplosionS2CPacket;
import net.minecraft.network.packet.s2c.play.ParticleS2CPacket;

public class ExploitFixerModule extends AbstractModule implements IncomingPacketListener {

    public final String correctTextureUrlStart = "textures.minecraft.net/";

    public final BooleanValue blockInvalidTextureUrls = new BooleanValue(
            this,
            "Block invalid texture URLs",
            "Blocks all incoming textures that are not from Mojang services" + correctTextureUrlStart,
            true
    );

    public final BooleanValue blockBrigadierStackOverflowCrash = new BooleanValue(
            this,
            "Block brigadier stack overflow crash",
            "Blocks an stack overflow crash which is caused by brigadier.",
            true
    );

    public final IntegerValue minSodiumEntityAverageSideLength = new IntegerValue(
            this,
            "Min sodium entity average side length",
            "How long should an average side from an entity be to get always rendered to prevent sodium crash.",
            10,
            10,
            1000
    ).visibleCondition(() -> FabricLoader.getInstance().isModLoaded("sodium"));

    private final BooleanValue blockTooBigExplosions = new BooleanValue(
            this,
            "Block too big explosions",
            "Blocks too big explosions.",
            true
    );

    private final FloatValue maxExplosionPlayerVelocity = new FloatValue(
            this,
            "Max explosion player velocity",
            "Set the max player velocity for explosions.",
            5f,
            0f,
            10000f
    ).visibleCondition(this.blockTooBigExplosions::getValue);

    private final FloatValue maxExplosionRadius = new FloatValue(
            this,
            "Max explosion radius",
            "Set the max radius for explosions.",
            100f,
            100f,
            10000f
    ).visibleCondition(this.blockTooBigExplosions::getValue);

    private final IntegerValue maxExplosionAffectedBlocks = new IntegerValue(
            this,
            "Max explosion affected blocks",
            "Set the max affected blocks for explosions.",
            100,
            100,
            10000
    ).visibleCondition(this.blockTooBigExplosions::getValue);

    private final BooleanValue blockTooManyParticles = new BooleanValue(
            this,
            "Block too many particles",
            "Blocks particles when their count is too high.",
            true
    );

    private final IntegerValue countToBlockParticles = new IntegerValue(
            this,
            "Count to block particles",
            "Set the count to block the particles (per particle type).",
            2000,
            500,
            10000
    ).visibleCondition(this.blockTooManyParticles::getValue);

    public final BooleanValue blockTooManyTranslateTexts = new BooleanValue(
            this,
            "Block too many translate texts",
            "If activated blocks too many translate texts.",
            false
    );

    public final IntegerValue translateTextDepthLimit = new IntegerValue(
            this,
            "Translate text depth limit",
            "Set the depth limit for the translate text method to block too many text glyphs.",
            1000,
            200,
            1000
    ).visibleCondition(this.blockTooManyTranslateTexts::getValue);

    public final BooleanValue blockTooManyTextGlyphs = new BooleanValue(
            this,
            "Block too many text glyphs",
            "If activated blocks too many text glyphs.",
            false
    );

    public final IntegerValue countToBlockTextGlyphs = new IntegerValue(
            this,
            "Count to block text glyphs",
            "Set the count to block the text glyphs.",
            1000,
            100,
            10000
    ).visibleCondition(this.blockTooManyTextGlyphs::getValue);

    public final BooleanValue blockTooLongTexts = new BooleanValue(
            this,
            "Block too long texts",
            "If activated blocks too long texts.",
            false
    );

    public final IntegerValue countToBlockTooLongTexts = new IntegerValue(
            this,
            "Count to block too long texts",
            "Set the count to block the too long texts.",
            1000,
            100,
            10000
    ).visibleCondition(this.blockTooLongTexts::getValue);

    public final BooleanValue modifyDisplayNameLength = new BooleanValue(
            this,
            "Modify display name length",
            "If activated allows you to modify the max display name length.",
            true
    );

    public final IntegerValue maxDisplayNameLength = new IntegerValue(
            this,
            "Max display name length",
            "How long can a display name be.",
            250,
            3,
            500
    ).visibleCondition(this.modifyDisplayNameLength::getValue);

    public final BooleanValue blockStructureBlockBoundingBoxes = new BooleanValue(
            this,
            "Block structure block bounding boxes",
            "Blocks the bounding boxes from structure blocks.",
            true
    );

    public final BooleanValue blockStructureBlockAirBoxes = new BooleanValue(
            this,
            "Block structure block air boxes",
            "Blocks the air boxes from structure blocks.",
            true
    );

    public final BooleanValue blockIllusionerEntityDuplicates = new BooleanValue(
            this,
            "Block illusioner entity duplicates",
            "Blocks the duplicates from illusioner entities.",
            true
    );

    public ExploitFixerModule() {
        super(
                "Exploit Fixer",
                "Fixes exploits that could harm your game or even your computer.",
                Category.EXPLOIT
        );
        this.activateDefault();
        this.markExperimental();
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(IncomingPacketEvent.ID, this);
    }

    @Override
    public void deactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(IncomingPacketEvent.ID, this);
    }

    @Override
    public void onIncomingPacket(final IncomingPacketEvent event) {
        final Packet<?> packet = event.packet;
        if (packet instanceof final ParticleS2CPacket particleS2CPacket) {
            if (this.blockTooManyParticles.getValue()) {
                particleS2CPacket.count = Math.min(particleS2CPacket.count, this.countToBlockParticles.getValue());
            }
        }
        else if (packet instanceof final ExplosionS2CPacket explosionS2CPacket) {
            final float maxExplosionPlayerVelocity = this.maxExplosionPlayerVelocity.getValue();
            explosionS2CPacket.playerVelocityX = Math.min(explosionS2CPacket.getPlayerVelocityX(), maxExplosionPlayerVelocity);
            explosionS2CPacket.playerVelocityY = Math.min(explosionS2CPacket.getPlayerVelocityY(), maxExplosionPlayerVelocity);
            explosionS2CPacket.playerVelocityZ = Math.min(explosionS2CPacket.getPlayerVelocityZ(), maxExplosionPlayerVelocity);
            explosionS2CPacket.radius = Math.min(explosionS2CPacket.getRadius(), this.maxExplosionRadius.getValue());
            explosionS2CPacket.affectedBlocks = explosionS2CPacket.getAffectedBlocks().subList(0, Math.min(explosionS2CPacket.getAffectedBlocks().size(), this.maxExplosionAffectedBlocks.getValue()));
        }
    }

}
