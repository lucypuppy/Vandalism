/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import com.google.gson.*;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.base.value.impl.rendering.ButtonValue;
import de.nekosarekawaii.vandalism.event.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.event.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.Module;
import de.nekosarekawaii.vandalism.util.ChatUtil;
import de.nekosarekawaii.vandalism.util.MSTimer;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket;
import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import net.minecraft.util.Util;
import net.minecraft.util.math.BlockPos;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

public class EcholocationModule extends Module implements PlayerUpdateListener, IncomingPacketListener {

    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    private final BooleanValue displaySignText = new BooleanValue(
            this,
            "Display Sign Text",
            "Displays the text of checked signs when the chunk gets loaded.",
            false
    );

    private final IntegerValue maxPacketsPerCheck = new IntegerValue(
            this,
            "Max Packets Per Check",
            "The maximum amount of packets per check.",
            1,
            1,
            10000
    );

    private final IntegerValue checkDelay = new IntegerValue(
            this,
            "Check Delay",
            "The delay between checks.",
            10000,
            0,
            60000
    );

    private final ButtonValue openFileButton = new ButtonValue(this, "Open File", "Opens the echolocation file.", buttonValue -> {
        try {
            this.reset();
            this.reloadLocations();
            Util.getOperatingSystem().open(this.contentFile);
        } catch (final Exception e) {
            Vandalism.getInstance().getLogger().error("Failed to open echolocation file!", e);
        }
    });

    private final MSTimer delayTimer = new MSTimer();
    private final List<AlertLocation> locationMap = new ArrayList<>();
    private final File contentFile = new File(Vandalism.getInstance().getRunDirectory(), "echolocation.json");
    private int lastLocationId;

    public EcholocationModule() {
        super(
                "Echolocation",
                "This module allows you to check for loaded chunks via. sign update packets on the server (Vanilla/Spigot).",
                Category.EXPLOIT
        );
        this.deactivateAfterSessionDefault();
    }

    @Override
    public void onActivate() {
        this.reset();
        this.reloadLocations();
        Vandalism.getInstance().getEventSystem().subscribe(this, PlayerUpdateEvent.ID, IncomingPacketEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, PlayerUpdateEvent.ID, IncomingPacketEvent.ID);
        this.reset();
    }

    private void reset() {
        this.locationMap.clear();
        this.lastLocationId = 0;
    }

    private void reloadLocations() {
        if (!this.contentFile.exists()) {
            try (final FileWriter fw = new FileWriter(this.contentFile)) {
                final JsonObject jsonObject = new JsonObject();
                final JsonArray locations = new JsonArray();
                final JsonObject location = new JsonObject();
                location.addProperty("x", 0);
                location.addProperty("y", 0);
                location.addProperty("z", 0);
                location.addProperty("alert", "Example Alert");
                locations.add(location);
                jsonObject.add("locations", locations);
                fw.write(GSON.toJson(jsonObject));
                fw.flush();
            } catch (final Exception e) {
                ChatUtil.errorChatMessage("Failed to create echolocation file: " + e.getMessage());
            }
        }
        if (this.locationMap.isEmpty()) {
            try (final FileReader fr = new FileReader(this.contentFile)) {
                final JsonObject jsonObject = GSON.fromJson(fr, JsonObject.class);
                if (jsonObject.has("locations")) {
                    final JsonArray locations = jsonObject.getAsJsonArray("locations");
                    for (final JsonElement locationElement : locations) {
                        final JsonObject location = locationElement.getAsJsonObject();
                        if (!location.has("x") || !location.has("y") || !location.has("z") || !location.has("alert")) {
                            continue;
                        }
                        final int x = location.get("x").getAsInt();
                        final int y = location.get("y").getAsInt();
                        final int z = location.get("z").getAsInt();
                        final String alert = location.get("alert").getAsString();
                        this.locationMap.add(new AlertLocation(new BlockPos(x, y, z), alert));
                    }
                }
            } catch (final Exception e) {
                ChatUtil.errorChatMessage("Failed to load echolocation file: " + e.getMessage());
            }
        }
    }

    @Override
    public void onPrePlayerUpdate(final PlayerUpdateEvent event) {
        if (this.locationMap.isEmpty()) {
            return;
        }
        if (this.delayTimer.hasReached(this.checkDelay.getValue(), true)) {
            for (int i = 0; i < this.maxPacketsPerCheck.getValue(); i++) {
                this.lastLocationId++;
                if (this.lastLocationId >= this.locationMap.size()) {
                    this.lastLocationId = 0;
                }
                final AlertLocation entry = this.locationMap.get(this.lastLocationId);
                final String text = "";
                mc.getNetworkHandler().getConnection().send(new UpdateSignC2SPacket(entry.blockPos(), true, text, text, text, text), null, true);
            }
        }
    }

    @Override
    public void onIncomingPacket(final IncomingPacketEvent event) {
        if (event.packet instanceof final BlockEntityUpdateS2CPacket blockEntityUpdateS2CPacket) {
            if (blockEntityUpdateS2CPacket.getBlockEntityType().getRegistryEntry().equals(BlockEntityType.SIGN.getRegistryEntry())) {
                for (final AlertLocation alertLocation : this.locationMap) {
                    final BlockPos pos = blockEntityUpdateS2CPacket.getPos();
                    if (alertLocation.blockPos().equals(pos)) {
                        final NbtCompound nbt = blockEntityUpdateS2CPacket.getNbt();
                        if (!nbt.isEmpty()) {
                            final StringBuilder text = new StringBuilder();
                            text.append(Formatting.GOLD);
                            text.append(alertLocation.alert());
                            text.append(Formatting.GRAY).append(": ");
                            text.append(Formatting.DARK_GRAY).append("(");
                            text.append(Formatting.AQUA).append(blockEntityUpdateS2CPacket.getPos().toShortString());
                            text.append(Formatting.DARK_GRAY).append(")");
                            if (this.displaySignText.getValue()) {
                                text.append(Formatting.DARK_GRAY).append(" [");
                                if (nbt.contains("back_text")) {
                                    final NbtCompound backText = nbt.getCompound("back_text");
                                    if (backText.contains("messages")) {
                                        final NbtList messages = backText.getList("messages", 8);
                                        text.append(Formatting.RED).append("Back Messages: ");
                                        for (int i = 0; i < messages.size(); i++) {
                                            final String message = messages.getString(i);
                                            text.append(Formatting.DARK_AQUA).append(message);
                                            if (i != messages.size() - 1) {
                                                text.append(Formatting.GRAY).append(", ");
                                            }
                                        }
                                        text.append(Formatting.DARK_GRAY).append(" | ");
                                    }
                                }
                                if (nbt.contains("front_text")) {
                                    final NbtCompound frontText = nbt.getCompound("front_text");
                                    if (frontText.contains("messages")) {
                                        final NbtList messages = frontText.getList("messages", 8);
                                        text.append(Formatting.GREEN).append("Front Messages: ");
                                        for (int i = 0; i < messages.size(); i++) {
                                            final String message = messages.getString(i);
                                            text.append(Formatting.DARK_AQUA).append(message);
                                            if (i != messages.size() - 1) {
                                                text.append(Formatting.GRAY).append(", ");
                                            }
                                        }
                                    }
                                }
                                text.append(Formatting.DARK_GRAY).append("]");
                            }
                            ChatUtil.warningChatMessage(Text.literal(text.toString()));
                        }
                    }
                }
            }
        }
    }

    private record AlertLocation(BlockPos blockPos, String alert) {
    }

}
