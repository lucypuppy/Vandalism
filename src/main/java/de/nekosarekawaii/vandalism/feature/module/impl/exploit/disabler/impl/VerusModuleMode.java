/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.impl;

import com.viaversion.viaversion.api.protocol.version.ProtocolVersion;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.event.cancellable.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.event.normal.network.WorldListener;
import de.nekosarekawaii.vandalism.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.DisablerModule;
import de.nekosarekawaii.vandalism.feature.module.impl.movement.flight.FlightModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import de.nekosarekawaii.vandalism.integration.viafabricplus.ViaFabricPlusAccess;
import de.nekosarekawaii.vandalism.util.game.ChatUtil;
import de.nekosarekawaii.vandalism.util.game.PacketUtil;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;

import java.util.concurrent.CopyOnWriteArrayList;

public class VerusModuleMode extends ModuleMulti<DisablerModule> implements WorldListener, OutgoingPacketListener, PlayerUpdateListener {

    public VerusModuleMode() {
        super("Verus");
    }

    private final CopyOnWriteArrayList<Packet<?>> transCache = new CopyOnWriteArrayList<>();

    private final BooleanValue flyDisabler = new BooleanValue(this, "Fly Disabler", "Disables some fly checks.", true);
    private final BooleanValue combatDisabler = new BooleanValue(this, "Combat Disabler", "Disables some combat checks.", true);

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID, WorldLoadEvent.ID);
        if(flyDisabler.getValue()) {
            ChatUtil.warningChatMessage("While flying, you're not allowed to attack players or you'll get flagged.");
        }
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID, WorldLoadEvent.ID);
        this.transCache.clear();
    }

    @Override
    public void onOutgoingPacket(OutgoingPacketEvent event) {
        if (mc.player == null) return;
        if (ViaFabricPlusAccess.getTargetVersion() == ProtocolVersion.v1_8 && flyDisabler.getValue() && Vandalism.getInstance().getModuleManager().getByClass(FlightModule.class).isActive() && mc.player.age % 4 == 0) {
            ViaFabricPlusAccess.send1_8BlockPlacePacket(mc.player.getBlockPos(), 255, new ItemStack(Items.WATER_BUCKET), 0, 0.5f, 0);
        }
        if (event.packet instanceof final CommonPongC2SPacket packet && combatDisabler.getValue()) {
            this.transCache.add(packet);
            event.cancel();
        }
    }

    @Override
    public void onPrePlayerUpdate(PlayerUpdateEvent event) {
        if (this.transCache.size() > 150 && combatDisabler.getValue()) {
            for (Packet<?> packet : this.transCache) {
                PacketUtil.sendImmediately(packet, null, true);
            }

            this.transCache.clear();
        }
    }

    @Override
    public void onPreWorldLoad() {
        this.transCache.clear();
    }

}
