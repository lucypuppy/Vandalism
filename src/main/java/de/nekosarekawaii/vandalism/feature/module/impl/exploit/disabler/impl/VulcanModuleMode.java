/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.impl;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.event.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.event.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.DisablerModule;
import de.nekosarekawaii.vandalism.feature.module.impl.movement.ScaffoldModule;
import de.nekosarekawaii.vandalism.feature.module.template.module.ModuleMulti;
import de.nekosarekawaii.vandalism.util.PacketHelper;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;

public class VulcanModuleMode extends ModuleMulti<DisablerModule> implements OutgoingPacketListener, PlayerUpdateListener {

    private int parameter, ticksSincePong;

    public VulcanModuleMode() {
        super("Vulcan");
    }

    @Override
    public void onOutgoingPacket(OutgoingPacketEvent event) {
        if (mc.getNetworkHandler() == null || mc.getNetworkHandler().getConnection() == null || mc.player == null || mc.player.age == 0) {
            return;
        }

        if (event.packet instanceof final ClientCommandC2SPacket packet) {
            if (packet.getMode() == ClientCommandC2SPacket.Mode.START_SPRINTING || packet.getMode() == ClientCommandC2SPacket.Mode.STOP_SPRINTING) {
                event.cancel();
            }
        }

        if (event.packet instanceof final CommonPongC2SPacket packet) {
            if (parameter <= 0) {
                parameter = packet.getParameter();
            }
            event.cancel();
        }
    }

    @Override
    public void onPrePlayerUpdate(PlayerUpdateEvent event) {
        if (mc.player.isInFluid() || mc.player.isTouchingWater() || mc.player.isDead() || mc.player.isHoldingOntoLadder() || mc.player.getAbilities().flying) {
            return;
        }
        if (mc.player.age % 10 == 0 && Vandalism.getInstance().getModuleManager().getByClass(ScaffoldModule.class).isActive()) {
            mc.getNetworkHandler().getConnection().channel.writeAndFlush(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY));
            mc.getNetworkHandler().getConnection().channel.writeAndFlush(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY));
        }

        ticksSincePong++;
        if (parameter > 100 && ticksSincePong > 500) {
            parameter++;
            PacketHelper.sendImmediately(new CommonPongC2SPacket(parameter), null, true);
            ticksSincePong = 0;
        }
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID);
    }
}