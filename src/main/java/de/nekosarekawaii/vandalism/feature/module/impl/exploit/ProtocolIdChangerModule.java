/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.base.value.impl.rendering.ButtonValue;
import de.nekosarekawaii.vandalism.event.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import net.minecraft.network.NetworkPhase;
import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;
import net.minecraft.util.Util;

public class ProtocolIdChangerModule extends AbstractModule implements OutgoingPacketListener {

    private static final String PROTOCOL_VERSIONS_LIST_URL = "https://wiki.vg/Protocol_version_numbers";

    private final IntegerValue protocolId = new IntegerValue(
            this,
            "Protocol Id",
            "The protocol id you want to connect with. (Defaults to 1.21-rc1)",
            203,
            0,
            1000
    );

    private final BooleanValue useNewSnapshotCalculation = new BooleanValue(
            this,
            "Use New Snapshot Calculation",
            "Whether to use the new snapshot protocol id calculation which is used for versions above 1.16.3",
            true
    );

    private final ButtonValue openProtocolVersionsList = new ButtonValue(
            this,
            "Open Protocol Versions List",
            "Opens a list of all protocol versions.",
            btn -> {
                Util.getOperatingSystem().open(PROTOCOL_VERSIONS_LIST_URL);
            }
    );

    public ProtocolIdChangerModule() {
        super(
                "Protocol Id Changer",
                "Allows you to connect to snapshot or release candidate minecraft servers.\n\n" +
                        "This still requires you to select a version in VFP which is near the snapshot or\n" +
                        "release candidate that you want to connect with!\n\nDoesn't work all the time.",
                Category.EXPLOIT
        );
    }

    @Override
    protected void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(OutgoingPacketEvent.ID, this);
    }

    @Override
    protected void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(OutgoingPacketEvent.ID, this);
    }

    @Override
    public void onOutgoingPacket(final OutgoingPacketEvent event) {
        if (event.networkPhase == NetworkPhase.STATUS) {
            return;
        }
        if (event.packet instanceof final HandshakeC2SPacket packet) {
            int protocolVersion = this.protocolId.getValue();
            if (this.useNewSnapshotCalculation.getValue()) {
                protocolVersion += 0x40000000;
            }
            if (packet.protocolVersion() != protocolVersion) {
                event.cancel();
                event.connection.send(new HandshakeC2SPacket(protocolVersion, packet.address, packet.port(), packet.intendedState()));
            }
        }
    }

}
