/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.impl;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.event.cancellable.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.disabler.DisablerModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import de.nekosarekawaii.vandalism.util.game.PacketUtil;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.query.QueryPingC2SPacket;

import java.util.concurrent.ConcurrentHashMap;

public class CubeCraft2ModuleMode extends ModuleMulti<DisablerModule> implements OutgoingPacketListener, PlayerUpdateListener {

    private final ConcurrentHashMap<Packet<?>, Long> packets = new ConcurrentHashMap<>();

    public CubeCraft2ModuleMode() {
        super("CubeCraft 2");
    }

    @Override
    public void onOutgoingPacket(OutgoingPacketEvent event) {
        if (mc.getNetworkHandler() == null || mc.getNetworkHandler().getConnection() == null || mc.player == null || mc.player.age == 0) {
            packets.clear();
            return;
        }

        if(event.packet instanceof final KeepAliveC2SPacket packet) {
            packets.put(new KeepAliveC2SPacket(packet.getId()), System.currentTimeMillis());
            event.cancel();
        }

        if (event.packet instanceof final CommonPongC2SPacket packet) {
            packets.put(new CommonPongC2SPacket(packet.getParameter()), System.currentTimeMillis());
            event.cancel();
        }

        if(event.packet instanceof final QueryPingC2SPacket packet) {
            packets.put(new QueryPingC2SPacket(packet.getStartTime()), System.currentTimeMillis());
            event.cancel();
        }

        if (event.packet instanceof final PlayerMoveC2SPacket packet) {
            packet.y = Math.round(packet.y / 0.015625) * 0.015625;
        }
    }

    @Override
    public void onPrePlayerUpdate(PlayerUpdateEvent event) {
        for(Packet<?> packet : packets.keySet()) {
            if(System.currentTimeMillis() - packets.get(packet) >= 20000) {
                packets.remove(packet);
                PacketUtil.sendImmediately(packet, null, true);
            }
        }
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, OutgoingPacketEvent.ID, PlayerUpdateEvent.ID);
    }

}
