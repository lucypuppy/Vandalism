/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.normal.game.MaxTickLister;
import de.nekosarekawaii.vandalism.base.event.normal.game.TickTimeListener;
import de.nekosarekawaii.vandalism.base.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.base.value.impl.awt.KeyBindValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.FloatValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import org.lwjgl.glfw.GLFW;

public class TickBaseModule extends AbstractModule implements MaxTickLister, PlayerUpdateListener, TickTimeListener {

    private int charge;
    private boolean shouldCharge;
    private boolean uncharge;

    private final IntegerValue maxCharge = new IntegerValue(
            this,
            "Max Charge",
            "The maximum amount of ticks you can charge.",
            100,
            0,
            1000
    );

    private final FloatValue ticksPerSecond = new FloatValue(
            this,
            "Ticks per seconds",
            "The amount of speed the timer should have.",
            20.0f,
            1.0f,
            200.0f
    );

    private final KeyBindValue chargeKey = new KeyBindValue(
            this,
            "Charge Key",
            "The key to charge the tick base.",
            GLFW.GLFW_KEY_UP
    );

    private final KeyBindValue unChargeKey = new KeyBindValue(
            this,
            "Un Charge Key",
            "The key to uncharge the tick base.",
            GLFW.GLFW_KEY_DOWN
    );

    public TickBaseModule() {
        super(
                "Tick Base",
                "Allows you to manipulate how minecraft handles ticks and speedup the game.",
                Category.EXPLOIT
        );
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(
                this,
                MaxTickEvent.ID,
                PlayerUpdateEvent.ID,
                TickTimeEvent.ID
        );
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(
                this,
                MaxTickEvent.ID,
                PlayerUpdateEvent.ID,
                TickTimeEvent.ID
        );

        this.charge = 0;
        this.shouldCharge = false;
        this.uncharge = false;
    }

    @Override
    public void onPostPlayerUpdate(final PlayerUpdateEvent event) {
        if (this.charge > 0 && this.uncharge) {
            this.charge--;
        }
    }

    @Override
    public void onMaxTicks(final MaxTickEvent event) {
        this.shouldCharge = this.chargeKey.isPressed() && !this.unChargeKey.isPressed();
        this.uncharge = this.unChargeKey.isPressed() && !this.chargeKey.isPressed();

        if (this.shouldCharge) {
            this.charge += Math.min(event.maxTicks, event.ticks);

            if (this.charge > this.maxCharge.getValue()) {
                this.charge = this.maxCharge.getValue();
            } else {
                event.minTicks = 0;
            }
            return;
        }

        if (this.charge > 0 && this.uncharge) {
            event.minTicks = event.ticks;
        }
    }

    @Override
    public void onTickTimings(final TickTimeEvent event) {
        if (this.charge > 0 && this.uncharge) {
            event.tickTime = 1000f / this.ticksPerSecond.getValue();
        }
    }

    public int getCharge() {
        return this.charge;
    }

}
