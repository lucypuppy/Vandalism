/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.base.event.normal.game.TimeTravelListener;
import de.nekosarekawaii.vandalism.base.value.impl.misc.KeyBindValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.base.value.template.ValueGroup;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import de.nekosarekawaii.vandalism.feature.module.impl.combat.KillAuraModule;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket;
import org.lwjgl.glfw.GLFW;

public class TickBaseModule extends AbstractModule implements TimeTravelListener, IncomingPacketListener {

    private boolean shouldCharge, unCharge;
    private boolean shouldAuraCharge, unChargeAura;
    private long prevTime;
    private long shifted;

    private final ValueGroup generalGroup = new ValueGroup(
            this,
            "General",
            "General settings for tick base."
    );

    private final ValueGroup combatGroup = new ValueGroup(
            this,
            "Combat",
            "Combat settings for tick base."
    );

    private final IntegerValue maxCharge = new IntegerValue(
            generalGroup,
            "Max Charge",
            "The maximum amount of ticks you can charge.",
            100,
            0,
            1000
    );

    private final KeyBindValue chargeKey = new KeyBindValue(
            generalGroup,
            "Charge Key",
            "The key to charge the tick base.",
            GLFW.GLFW_KEY_UP
    );

    private final KeyBindValue unChargeKey = new KeyBindValue(
            generalGroup,
            "Un Charge Key",
            "The key to uncharge the tick base.",
            GLFW.GLFW_KEY_DOWN
    );

    private final BooleanValue inFight = new BooleanValue(
            combatGroup,
            "In Fight",
            "If you are in fight, the tick base will be charged automatically.",
            false
    );

    private final BooleanValue onHit = new BooleanValue(
            combatGroup,
            "On Hit",
            "If the enemy is hit, the tick base will be charged automatically.",
            false
    ).visibleCondition(inFight::getValue);

    private final BooleanValue inPreRange = new BooleanValue(
            combatGroup,
            "In Pre Range",
            "If the enemy is in pre range, the tick base will be charged automatically.",
            true
    ).visibleCondition(inFight::getValue);

    private final IntegerValue fightCharge = new IntegerValue(
            combatGroup,
            "Fight Charge",
            "The amount of ticks you can charge in fight.",
            1,
            0,
            50
    ).visibleCondition(inFight::getValue);

    private final KillAuraModule killAuraModule;

    public TickBaseModule(final KillAuraModule killAuraModule) {
        super(
                "Tick Base",
                "Allows you to manipulate how minecraft handles ticks and speedup the game.",
                Category.EXPLOIT
        );

        this.killAuraModule = killAuraModule;
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(
                this,
                TimeTravelEvent.ID,
                IncomingPacketEvent.ID
        );
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(
                this,
                TimeTravelEvent.ID,
                IncomingPacketEvent.ID
        );

        this.shouldCharge = false;
        this.unCharge = false;
        this.shouldAuraCharge = false;
        this.unChargeAura = false;
        this.prevTime = 0;
        this.shifted = 0;
    }

    @Override
    public void onTimeTravel(final TimeTravelEvent event) {
        if (mc.player == null) {
            this.shifted = 0;
            return;
        }
        this.shouldCharge = this.chargeKey.isPressed() && !this.unChargeKey.isPressed();
        this.unCharge = this.unChargeKey.isPressed() && !this.chargeKey.isPressed();

        if (this.inFight.getValue() && this.killAuraModule.isActive() && this.killAuraModule.getTarget() != null) {
            if (onHit.getValue()) {
                if (this.killAuraModule.getTarget() instanceof final LivingEntity livingEntity) {
                    if (livingEntity.hurtTime > 6) {
                        this.shouldAuraCharge = true;
                        this.unChargeAura = false;
                    } else if (getCharge() > fightCharge.getValue() && livingEntity.hurtTime <= 1) {
                        this.unChargeAura = true;
                        this.shouldAuraCharge = false;
                    }
                }
            }
            if (inPreRange.getValue()) {
                double distance = mc.player.distanceTo(this.killAuraModule.getTarget());
                if (distance <= this.killAuraModule.getAimRange() && distance > this.killAuraModule.getRange() && this.getCharge() < fightCharge.getValue()) {
                    this.shouldAuraCharge = true;
                    this.unChargeAura = false;
                } else {
                    this.unChargeAura = true;
                    this.shouldAuraCharge = false;
                }
            }
        } else {
            this.shouldAuraCharge = false;
            this.unChargeAura = false;
        }

        if ((shouldCharge && this.getCharge() < this.maxCharge.getValue()) || this.shouldAuraCharge) {
            this.shifted += event.time - this.prevTime;
            for (Entity entity : mc.world.getEntities()) {
                if (entity == null || entity == mc.player) continue;
                mc.world.tickEntity(entity);
            }
        } else if ((this.unCharge || this.unChargeAura) && this.shifted > 0) {
            this.shifted = 0;
        }
        prevTime = event.time;
        event.time -= this.shifted;
    }

    public int getCharge() {
        return (int) (shifted / mc.renderTickCounter.tickTime);
    }

    @Override
    public void onIncomingPacket(IncomingPacketEvent event) {
        if (event.packet instanceof PlayerRespawnS2CPacket) {
            shifted = 0;
        }
    }
}
