package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.misc.KeyBindValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.template.ValueGroup;
import de.nekosarekawaii.vandalism.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.event.normal.game.TimeTravelListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import net.minecraft.entity.Entity;
import net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket;
import org.lwjgl.glfw.GLFW;

public class TickBaseModule extends AbstractModule implements TimeTravelListener, IncomingPacketListener {

    private boolean shouldCharge, unCharge;
    private long prevTime;
    private long shifted;

    private final ValueGroup generalGroup = new ValueGroup(this, "General", "General settings for tick base.");

    private final IntegerValue maxCharge = new IntegerValue(generalGroup, "Max Charge", "The maximum amount of ticks you can charge.", 100, 0, 1000);
    private final KeyBindValue chargeKey = new KeyBindValue(generalGroup, "Charge Key", "The key to charge the tick base.", GLFW.GLFW_KEY_UP);
    private final KeyBindValue unChargeKey = new KeyBindValue(generalGroup, "Un Charge Key", "The key to uncharge the tick base.", GLFW.GLFW_KEY_DOWN);

    public TickBaseModule() {
        super("Tick Base", "Allows you to manipulate how minecraft handles ticks and speedup the game.", Category.EXPLOIT);
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(this, TimeTravelEvent.ID, IncomingPacketEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, TimeTravelEvent.ID, IncomingPacketEvent.ID);
        this.shouldCharge = false;
        this.unCharge = false;
        this.prevTime = 0;
        this.shifted = 0;
    }

    @Override
    public void onTimeTravel(final TimeTravelEvent event) {
        if (mc.player == null) {
            this.shifted = 0;
            return;
        }

        this.shouldCharge = this.chargeKey.isPressed() && !this.unChargeKey.isPressed();
        this.unCharge = this.unChargeKey.isPressed() && !this.chargeKey.isPressed();

        if (shouldCharge && this.getCharge() < this.maxCharge.getValue()) {
            this.shifted += event.time - this.prevTime;
            for (Entity entity : mc.world.getEntities()) {
                if (entity == null || entity == mc.player) continue;
                mc.world.tickEntity(entity);
            }
        } else if (this.unCharge && this.shifted > 0) {
            this.shifted = 0;
        }
        prevTime = event.time;
        event.time -= this.shifted;
    }

    public int getCharge() {
        return (int) (shifted / mc.renderTickCounter.tickTime);
    }

    @Override
    public void onIncomingPacket(IncomingPacketEvent event) {
        if (event.packet instanceof PlayerRespawnS2CPacket) {
            shifted = 0;
        }
    }
}