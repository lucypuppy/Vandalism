package de.nekosarekawaii.vandalism.feature.module.impl.exploit;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.misc.KeyBindValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.DoubleValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.base.value.impl.selection.ModeValue;
import de.nekosarekawaii.vandalism.base.value.template.ValueGroup;
import de.nekosarekawaii.vandalism.event.cancellable.network.IncomingPacketListener;
import de.nekosarekawaii.vandalism.event.normal.game.TimeTravelListener;
import de.nekosarekawaii.vandalism.feature.module.AbstractModule;
import de.nekosarekawaii.vandalism.feature.module.impl.combat.KillAuraModule;
import de.nekosarekawaii.vandalism.integration.newrotation.RotationManager;
import de.nekosarekawaii.vandalism.util.game.WorldUtil;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.math.Vec3d;
import org.lwjgl.glfw.GLFW;

public class TickBaseModule extends AbstractModule implements TimeTravelListener, IncomingPacketListener {

    private boolean shouldCharge, unCharge;
    private long prevTime;
    private long shifted;
    private boolean reached;

    private final ValueGroup generalGroup = new ValueGroup(this, "General", "General settings for tick base.");
    private final ValueGroup combatGroup = new ValueGroup(this, "Combat", "Combat settings for tick base.");

    private final IntegerValue maxCharge = new IntegerValue(generalGroup, "Max Charge", "The maximum amount of ticks you can charge.", 100, 0, 1000);
    private final KeyBindValue chargeKey = new KeyBindValue(generalGroup, "Charge Key", "The key to charge the tick base.", GLFW.GLFW_KEY_UP);
    private final KeyBindValue unChargeKey = new KeyBindValue(generalGroup, "Un Charge Key", "The key to uncharge the tick base.", GLFW.GLFW_KEY_DOWN);

    private final BooleanValue inFight = new BooleanValue(combatGroup, "In Fight", "If you are in fight, the tick base will be charged automatically.", false);
    private final ModeValue fightMode = new ModeValue(combatGroup, "Fight Mode", "The mode for fights.", "On Hit", "In Pre Range").visibleCondition(inFight::getValue);
    private final DoubleValue preRange = new DoubleValue(combatGroup, "Pre Range", "The range for the In Pre Range mode.", 0.5, 0.0, 3.0).visibleCondition(() -> inFight.getValue() && fightMode.getValue().equalsIgnoreCase("In Pre Range"));
    private final IntegerValue fightCharge = new IntegerValue(combatGroup, "Fight Charge", "The amount of ticks you can charge in fight.", 1, 0, 50).visibleCondition(inFight::getValue);

    private final KillAuraModule killAuraModule;

    public TickBaseModule(final KillAuraModule killAuraModule) {
        super("Tick Base", "Allows you to manipulate how minecraft handles ticks and speedup the game.", Category.EXPLOIT);
        this.killAuraModule = killAuraModule;
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(this, TimeTravelEvent.ID, IncomingPacketEvent.ID);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(this, TimeTravelEvent.ID, IncomingPacketEvent.ID);
        this.shouldCharge = false;
        this.unCharge = false;
        this.prevTime = 0;
        this.shifted = 0;
    }

    @Override
    public void onTimeTravel(final TimeTravelEvent event) {
        if (mc.player == null) {
            this.shifted = 0;
            return;
        }

        if (this.inFight.getValue() && this.killAuraModule.isActive() && this.killAuraModule.getTarget() != null) {
            switch (fightMode.getValue()) {
                case "On Hit": {
                    if (this.killAuraModule.getTarget() instanceof final LivingEntity livingEntity) {
                        if (livingEntity.hurtTime > 6) {
                            this.shouldCharge = true;
                            this.unCharge = false;
                        } else if (getCharge() > fightCharge.getValue() && livingEntity.hurtTime <= 1) {
                            this.unCharge = true;
                            this.shouldCharge = false;
                        }
                    }
                    break;
                }
                case "In Pre Range": {
                    RotationManager rotationManager = Vandalism.getInstance().getRotationManager();
                    if (rotationManager == null || rotationManager.getRotation() == null) {
                        this.unCharge = true;
                        this.shouldCharge = false;
                        break;
                    }

                    final double raytraceReach = this.killAuraModule.getRange() + this.preRange.getValue();
                    final HitResult raytrace = WorldUtil.raytrace(rotationManager.getRotation(), Math.pow(raytraceReach, 2));

                    if (this.killAuraModule.getTarget() instanceof final LivingEntity livingEntity) {
                        if (raytrace != null && raytrace.getType() == HitResult.Type.ENTITY) {
                            final Vec3d eyePos = mc.player.getEyePos();
                            final double distance = eyePos.distanceTo(raytrace.getPos());
                            if(this.getCharge() <= 0) {
                                reached = false;
                            }
                            if (distance <= raytraceReach && distance > this.killAuraModule.getRange() && this.getCharge() < fightCharge.getValue() && !reached) {
                                this.unCharge = false;
                                this.shouldCharge = true;
                            } else if(livingEntity.hurtTime <= 1 && this.getCharge() >= fightCharge.getValue()) {
                                reached = true;
                                this.unCharge = true;
                                this.shouldCharge = false;
                            }
                        }
                    }
                    break;
                }
            }

        } else {
            this.shouldCharge = this.chargeKey.isPressed() && !this.unChargeKey.isPressed();
            this.unCharge = this.unChargeKey.isPressed() && !this.chargeKey.isPressed();
        }

        if (shouldCharge && this.getCharge() < this.maxCharge.getValue()) {
            this.shifted += event.time - this.prevTime;
            for (Entity entity : mc.world.getEntities()) {
                if (entity == null || entity == mc.player) continue;
                mc.world.tickEntity(entity);
            }
        } else if (this.unCharge && this.shifted > 0) {
            this.shifted = 0;
        }
        prevTime = event.time;
        event.time -= this.shifted;
    }

    public int getCharge() {
        return (int) (shifted / mc.renderTickCounter.tickTime);
    }

    @Override
    public void onIncomingPacket(IncomingPacketEvent event) {
        if (event.packet instanceof PlayerRespawnS2CPacket) {
            shifted = 0;
        }
    }
}