/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.godmode.impl;

import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.value.impl.misc.KeyBindValue;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.event.network.OutgoingPacketListener;
import de.nekosarekawaii.vandalism.event.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.godmode.GodModeModule;
import de.nekosarekawaii.vandalism.feature.module.template.module.ModuleMulti;
import de.nekosarekawaii.vandalism.util.MovementUtil;
import de.nekosarekawaii.vandalism.util.render.util.InputType;
import net.minecraft.block.BlockState;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import org.lwjgl.glfw.GLFW;

public class PositionSpoofModuleMode extends ModuleMulti<GodModeModule> implements PlayerUpdateListener, OutgoingPacketListener {

    private final IntegerValue maxScanRange = new IntegerValue(this, "Max Scan Range", "The maximum range to port to.", 9, 3, 100);
    private final BooleanValue useKeyBind = new BooleanValue(this, "Use Key Bind", "Use a key bind instead of toggling the module to spoof your position.", true);
    private final KeyBindValue keyBind = new KeyBindValue(this, "Key Bind", "The key bind to spoof your position.", GLFW.GLFW_KEY_LEFT_SHIFT).visibleCondition(useKeyBind::getValue);
    private final BooleanValue reSyncToStartPos = new BooleanValue(this, "Re-Sync To Start Pos", "Re-sync to the start position after spoofing your position.", false);
    private final BooleanValue spoofSneak = new BooleanValue(this, "Spoof Sneak", "Spoof sneak to hide your name tag.", false);
    private final BooleanValue antiKick = new BooleanValue(this, "Anti Kick", "Prevents you from getting kicked by vanilla flying checks.", true);

    public PositionSpoofModuleMode() {
        super("Position Spoof");
    }

    @Override
    public void onActivate() {
        this.spoofedPos = null;
        if (mc.player != null) {
            this.reSyncPos = mc.player.getBlockPos().mutableCopy();
        }
        this.hasSpoofed = false;
        Vandalism.getInstance().getEventSystem().subscribe(this, PlayerUpdateEvent.ID, OutgoingPacketEvent.ID);
    }

    @Override
    public void onDeactivate() {
        mc.options.sneakKey.setPressed(false);
        Vandalism.getInstance().getEventSystem().unsubscribe(this, PlayerUpdateEvent.ID, OutgoingPacketEvent.ID);
        if (this.hasSpoofed && mc.player != null) {
            this.reSyncPos();
        }
        this.reSyncPos = null;
        this.spoofedPos = null;
        this.hasSpoofed = false;
    }

    @Override
    public void onOutgoingPacket(OutgoingPacketEvent event) {
        if (event.packet instanceof PlayerInteractEntityC2SPacket || event.packet instanceof PlayerInteractBlockC2SPacket) {
            if (this.hasSpoofed) {
                event.cancel();
            }
        }
        if (event.packet instanceof final PlayerMoveC2SPacket packet) {
            if (this.hasSpoofed && this.spoofedPos != null) {
                packet.x = this.spoofedPos.getX() + 0.5;
                packet.y = this.spoofedPos.getY();
                packet.z = this.spoofedPos.getZ() + 0.5;
                if (antiKick.getValue() && this.mc.player.age % 2 == 0) {
                    packet.y = packet.y - 0.1;
                }
            }
        }
    }

    private boolean hasSpoofed = false;
    private BlockPos reSyncPos;

    @Override
    public void onPrePlayerUpdate(PlayerUpdateEvent event) {
        if (InputType.isPressed(this.keyBind.getValue()) || !this.useKeyBind.getValue()) {
            if (!this.hasSpoofed) {
                this.setupSpoofPos();
                this.spoofSneak(true);
                this.hasSpoofed = true;
            }
            if (this.antiKick.getValue()) {
                this.mc.player.ticksSinceLastPositionPacketSent = 20;
            }
        } else {
            if (this.hasSpoofed) {
                if (this.spoofedPos != null) {
                    this.reSyncPos();
                }
                this.hasSpoofed = false;
            }
        }
    }

    private BlockPos spoofedPos;

    private void setupSpoofPos() {
        final BlockPos oldPos = this.mc.player.getBlockPos().mutableCopy();

        for (int i = 1; i < this.maxScanRange.getValue(); i++) {
            final BlockPos safeBlockPos = oldPos.add(0, -i, 0);
            final BlockPos airBlock1 = safeBlockPos.add(0, -1, 0);
            final BlockPos airBlock2 = safeBlockPos.add(0, -2, 0);

            final BlockState safeBlock = this.mc.world.getBlockState(safeBlockPos);
            final BlockState airBlock1State = this.mc.world.getBlockState(airBlock1);
            final BlockState airBlock2State = this.mc.world.getBlockState(airBlock2);

            if (safeBlock.isSolidSurface(this.mc.world, safeBlockPos, this.mc.player, Direction.UP) && airBlock1State.isAir() && airBlock2State.isAir()) {
                this.bypassClip(
                        mc.player.getPos().getX(),
                        mc.player.getPos().getY(),
                        mc.player.getPos().getZ(),
                        airBlock2.getX() + 0.5,
                        airBlock2.getY(),
                        airBlock2.getZ() + 0.5
                );
                this.spoofedPos = airBlock2;
                break;
            }
        }
    }

    private void bypassClip(final double startX, final double startY, final double startZ, final double endX, final double endY, final double endZ) {
        final Vec3d start = new Vec3d(startX, startY, startZ);
        final Vec3d end = new Vec3d(endX, endY, endZ);
        final double distance = start.distanceTo(end);
        final int packetsRequired = (int) Math.ceil(Math.abs(distance / 10));
        for (int packetNumber = 0; packetNumber < (packetsRequired - 1); packetNumber++) {
            mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true));
        }
        mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(end.x, end.y, end.z, true));
    }

    private void reSyncPos() {
        this.reSyncPos = this.reSyncToStartPos.getValue() ? this.reSyncPos : mc.player.getBlockPos().mutableCopy();
        MovementUtil.bypassClip(
                this.spoofedPos.getX() + 0.5,
                this.spoofedPos.getY(),
                this.spoofedPos.getZ() + 0.5,
                this.reSyncPos.getX() + 0.5,
                this.reSyncPos.getY(),
                this.reSyncPos.getZ() + 0.5);
        this.spoofSneak(false);
    }

    private void spoofSneak(final boolean sneak) {
        if (this.spoofSneak.getValue() && mc.getNetworkHandler().getConnection().channel.isActive()) {
            mc.getNetworkHandler().getConnection().channel.writeAndFlush(new ClientCommandC2SPacket(mc.player, sneak ? ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY : ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY));
        }
    }
}
