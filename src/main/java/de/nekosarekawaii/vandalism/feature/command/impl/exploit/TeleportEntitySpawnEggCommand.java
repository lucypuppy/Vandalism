/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import de.nekosarekawaii.vandalism.feature.command.Command;
import de.nekosarekawaii.vandalism.feature.command.arguments.PlayerArgumentType;
import de.nekosarekawaii.vandalism.util.ChatUtil;
import de.nekosarekawaii.vandalism.util.ItemStackUtil;
import net.minecraft.client.network.PlayerListEntry;
import net.minecraft.command.CommandSource;
import net.minecraft.command.argument.UuidArgumentType;
import net.minecraft.component.DataComponentTypes;
import net.minecraft.component.type.NbtComponent;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;

import java.util.UUID;

public class TeleportEntitySpawnEggCommand extends Command {

    public TeleportEntitySpawnEggCommand() {
        super("Allows you to teleport any entity in your dimension only by its uuid.", Category.EXPLOIT, "teleportentityspawnegg", "entityteleportspawnegg", "teleportentity");
    }

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.then(argument("name", PlayerArgumentType.create()).executes(context -> {
            final String player = PlayerArgumentType.get(context);
            if (!player.isEmpty()) {
                for (final PlayerListEntry entry : this.mc.getNetworkHandler().getPlayerList()) {
                    if (entry.getProfile().getName().equalsIgnoreCase(player)) {
                        this.give(entry.getProfile().getId());
                        break;
                    }
                }
            }
            else {
                ChatUtil.errorChatMessage("Please specify a player.");
            }
            return SINGLE_SUCCESS;
        }));
        builder.then(argument("uuid", UuidArgumentType.uuid()).executes(context -> {
            this.give(context.getArgument("uuid", UUID.class));
            return SINGLE_SUCCESS;
        }));
    }

    private void give(final UUID uuid) {
        final ItemStack itemStack = new ItemStack(Items.HORSE_SPAWN_EGG);
        final NbtCompound entityData = new NbtCompound();
        final NbtCompound renderItem = new NbtCompound();
        renderItem.putInt("count", 1);
        renderItem.putString("id", "minecraft:stone_button");
        entityData.put("Item", renderItem);
        entityData.putString("id", "minecraft:ender_pearl");
        entityData.putUuid("Owner", uuid);
        itemStack.set(DataComponentTypes.ENTITY_DATA, NbtComponent.of(entityData));
        ItemStackUtil.giveItemStack(itemStack);
    }

}
