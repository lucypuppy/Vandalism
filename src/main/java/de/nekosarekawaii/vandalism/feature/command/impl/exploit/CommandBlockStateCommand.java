/*
 * This file is part of Vandalism - https://github.com/NekosAreKawaii/Vandalism
 * Copyright (C) 2023-2024 NekosAreKawaii, FooFieOwO, Recyz and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.nekosarekawaii.vandalism.feature.command.impl.exploit;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import de.nekosarekawaii.vandalism.feature.command.AbstractCommand;
import net.minecraft.block.entity.CommandBlockBlockEntity;
import net.minecraft.command.CommandSource;
import net.minecraft.network.packet.c2s.play.UpdateCommandBlockC2SPacket;
import net.minecraft.util.math.BlockPos;

public class CommandBlockStateCommand extends AbstractCommand {

    public CommandBlockStateCommand() {
        super(
                "Checks if command blocks are activated on the server.",
                Category.EXPLOIT,
                "commandblockstate",
                "cmdblockcheck",
                "checkcmdblock",
                "checkcommandblock",
                "cmdblockstatecheck"
        );
    }

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.executes(context -> {
            this.sendCommandBlockState("say Hello, world!");
            return SINGLE_SUCCESS;
        });
        builder.then(argument("command", StringArgumentType.greedyString()).executes(context -> {
            this.sendCommandBlockState(context.getArgument("command", String.class));
            return SINGLE_SUCCESS;
        }));
    }

    private void sendCommandBlockState(final String command) {
        if (this.mc.getNetworkHandler() != null) {
            this.mc.getNetworkHandler().sendPacket(new UpdateCommandBlockC2SPacket(
                    BlockPos.ORIGIN, command,
                    CommandBlockBlockEntity.Type.AUTO,
                    false,
                    false,
                    false
            ));
        }
    }

}
