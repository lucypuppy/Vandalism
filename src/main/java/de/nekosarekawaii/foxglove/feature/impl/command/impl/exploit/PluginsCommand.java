package de.nekosarekawaii.foxglove.feature.impl.command.impl.exploit;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.suggestion.Suggestion;
import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.nekosarekawaii.foxglove.event.PacketListener;
import de.nekosarekawaii.foxglove.feature.FeatureCategory;
import de.nekosarekawaii.foxglove.feature.impl.command.Command;
import de.nekosarekawaii.foxglove.util.ChatUtils;
import de.nekosarekawaii.foxglove.util.RunnableScheduleUtils;
import joptsimple.internal.Strings;
import net.minecraft.command.CommandSource;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;
import net.minecraft.util.Formatting;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class PluginsCommand extends Command implements PacketListener {

    private boolean running, received = false;

    private final static String BUKKIT_COMMAND_PREFIX = "bukkit:";

    private final static String[] COMMANDS = new String[]{
            "about",
            "version",
            "ver",
            "?",
            "normal"
    };

    public PluginsCommand() {
        super(
                "Plugins",
                "Lets you view the plugins the server.",
                FeatureCategory.EXPLOIT,
                false,
                "pl",
                "plugins",
                "viewplugins",
                "showplugins"
        );
    }

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        for (final String command : COMMANDS) {
            builder.then(literal(command)
                    .executes(context -> {
                        this.sendPacket(command);
                        return singleSuccess;
                    })
            );
            if (!command.equals("normal")) {
                builder.then(literal(BUKKIT_COMMAND_PREFIX + command)
                        .executes(context -> {
                            this.sendPacket(BUKKIT_COMMAND_PREFIX + command);
                            return singleSuccess;
                        })
                );
            }
        }
    }

    private void sendPacket(final String command) {
        if (this.running) {
            ChatUtils.errorChatMessage("Plugins check already running!");
            return;
        }
        this.running = true;
        this.received = false;
        if (networkHandler() == null) return;
        DietrichEvents2.global().subscribe(PacketEvent.ID, this);
        RunnableScheduleUtils.scheduleRunnableWithDelay(() -> {
            DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
            this.running = false;
            if (!this.received) ChatUtils.errorChatMessage("Plugins check timed out!");
        }, 2500);
        networkHandler().sendPacket(new RequestCommandCompletionsC2SPacket(
                networkHandler().getCommandSource().completionId + 1,
                "/" + command + (command.equals("normal") ? "" : " ")
        ));
    }

    @Override
    public void onPacket(final PacketEvent event) {
        if (event.packet instanceof final CommandSuggestionsS2CPacket commandSuggestionsS2CPacket) {
            final List<Suggestion> list = commandSuggestionsS2CPacket.getSuggestions().getList();
            if (!list.isEmpty()) {
                this.received = true;
                final List<String> plugins = new ArrayList<>();
                for (final Suggestion entry : list) {
                    String pluginName = entry.getText();
                    boolean cantAdd = true;
                    if (pluginName.contains("/")) pluginName = pluginName.replace("/", "");
                    if (pluginName.contains(":")) {
                        final String[] commandData = pluginName.split(":");
                        if (commandData.length > 1) {
                            pluginName = commandData[0];
                            cantAdd = false;
                        }
                    } else if (Character.isUpperCase(pluginName.charAt(0))) {
                        cantAdd = false;
                    }
                    if (!cantAdd && !plugins.contains(pluginName)) plugins.add(pluginName);
                }
                if (!plugins.isEmpty()) {
                    Collections.sort(plugins);
                    ChatUtils.infoChatMessage(Formatting.WHITE + "Plugins (" + plugins.size() + "): " + Formatting.GREEN + Strings.join(plugins.toArray(String[]::new), Formatting.WHITE + ", " + Formatting.GREEN));
                } else ChatUtils.errorChatMessage("No Plugins found!");
            }
        }
    }

}
