package de.vandalismdevelopment.vandalism.feature.impl.module.impl.exploit.modes.godmode;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.florianmichael.rclasses.math.integration.MSTimer;
import de.vandalismdevelopment.vandalism.event.TickListener;
import de.vandalismdevelopment.vandalism.feature.impl.module.ModuleMode;
import de.vandalismdevelopment.vandalism.feature.impl.module.impl.exploit.GodModeModule;
import de.vandalismdevelopment.vandalism.value.Value;
import de.vandalismdevelopment.vandalism.value.impl.number.slider.SliderIntegerValue;

public class HealCommandModuleMode extends ModuleMode<GodModeModule> implements TickListener {

    private boolean needsToSentCommand = false;

    private final Value<Integer> delay = new SliderIntegerValue(
            "Delay",
            "The delay in ticks before respawning.",
            this.getParent(),
            500,
            0,
            10000
    ).visibleConsumer(() -> this.getParent().mode.getSelectedMode().equals(this));

    private final MSTimer delayTimer = new MSTimer();

    public HealCommandModuleMode(final GodModeModule parent) {
        super("Heal Command", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
        this.needsToSentCommand = false;
    }

    @Override
    public void onTick() {
        if (this.player() == null) return;

        if (this.needsToSentCommand) {
            this.needsToSentCommand = false;
            if (!this.player().isDead())
                this.networkHandler().sendChatCommand("heal");
        }

        if (this.player().getHealth() <= this.player().getMaxHealth() / 2f && this.delayTimer.hasReached(this.delay.getValue(), true))
            this.needsToSentCommand = true;

    }

}
