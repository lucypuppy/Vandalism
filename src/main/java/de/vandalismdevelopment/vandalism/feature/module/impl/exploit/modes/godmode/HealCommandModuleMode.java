package de.vandalismdevelopment.vandalism.feature.module.impl.exploit.modes.godmode;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.florianmichael.rclasses.math.integration.MSTimer;
import de.vandalismdevelopment.vandalism.base.event.game.TickGameListener;
import de.vandalismdevelopment.vandalism.feature.module.template.ModuleMulti;
import de.vandalismdevelopment.vandalism.feature.module.impl.exploit.GodModeModule;
import de.vandalismdevelopment.vandalism.base.value.Value;
import de.vandalismdevelopment.vandalism.base.value.impl.number.IntegerValue;

public class HealCommandModuleMode extends ModuleMulti<GodModeModule> implements TickGameListener {

    private boolean needsToSentCommand = false;

    private final Value<Integer> delay = new IntegerValue(
            this.getParent(),
            "Delay",
            "The delay in ticks before respawning.",
            500,
            0,
            10000
    ).visibleCondition(() -> this.getParent().mode.getValue().equals(this));

    private final MSTimer delayTimer = new MSTimer();

    public HealCommandModuleMode(final GodModeModule parent) {
        super("Heal Command", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickGameEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickGameEvent.ID, this);
        this.needsToSentCommand = false;
    }

    @Override
    public void onTick() {
        if (this.mc.player == null) {
            return;
        }

        if (this.needsToSentCommand) {
            this.needsToSentCommand = false;
            if (!this.mc.player.isDead()) {
                this.mc.getNetworkHandler().sendChatCommand("heal");
            }
        }

        if (this.mc.player.getHealth() <= this.mc.player.getMaxHealth() / 2f && this.delayTimer.hasReached(this.delay.getValue(), true)) {
            this.needsToSentCommand = true;
        }
    }

}
