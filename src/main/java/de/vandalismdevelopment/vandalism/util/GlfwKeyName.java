package de.vandalismdevelopment.vandalism.util;

import de.vandalismdevelopment.vandalism.util.interfaces.EnumNameNormalizer;
import org.lwjgl.glfw.GLFW;

public enum GlfwKeyName implements EnumNameNormalizer {

    UNKNOWN(GLFW.GLFW_KEY_UNKNOWN),

    KP_0(GLFW.GLFW_KEY_KP_0),
    KP_1(GLFW.GLFW_KEY_KP_1),
    KP_2(GLFW.GLFW_KEY_KP_2),
    KP_3(GLFW.GLFW_KEY_KP_3),
    KP_4(GLFW.GLFW_KEY_KP_4),
    KP_5(GLFW.GLFW_KEY_KP_5),
    KP_6(GLFW.GLFW_KEY_KP_6),
    KP_7(GLFW.GLFW_KEY_KP_7),
    KP_8(GLFW.GLFW_KEY_KP_8),
    KP_9(GLFW.GLFW_KEY_KP_9),
    KP_DECIMAL(GLFW.GLFW_KEY_KP_DECIMAL),
    KP_DIVIDE(GLFW.GLFW_KEY_KP_DIVIDE),
    KP_MULTIPLY(GLFW.GLFW_KEY_KP_MULTIPLY),
    KP_SUBTRACT(GLFW.GLFW_KEY_KP_SUBTRACT),
    KP_ADD(GLFW.GLFW_KEY_KP_ADD),
    KP_ENTER(GLFW.GLFW_KEY_KP_ENTER),
    KP_EQUAL(GLFW.GLFW_KEY_KP_EQUAL),
    A(GLFW.GLFW_KEY_A),
    B(GLFW.GLFW_KEY_B),
    C(GLFW.GLFW_KEY_C),
    D(GLFW.GLFW_KEY_D),
    E(GLFW.GLFW_KEY_E),
    F(GLFW.GLFW_KEY_F),
    G(GLFW.GLFW_KEY_G),
    H(GLFW.GLFW_KEY_H),
    I(GLFW.GLFW_KEY_I),
    J(GLFW.GLFW_KEY_J),
    K(GLFW.GLFW_KEY_K),
    L(GLFW.GLFW_KEY_L),
    M(GLFW.GLFW_KEY_M),
    N(GLFW.GLFW_KEY_N),
    O(GLFW.GLFW_KEY_O),
    P(GLFW.GLFW_KEY_P),
    Q(GLFW.GLFW_KEY_Q),
    R(GLFW.GLFW_KEY_R),
    S(GLFW.GLFW_KEY_S),
    T(GLFW.GLFW_KEY_T),
    U(GLFW.GLFW_KEY_U),
    V(GLFW.GLFW_KEY_V),
    W(GLFW.GLFW_KEY_W),
    X(GLFW.GLFW_KEY_X),
    Y(GLFW.GLFW_KEY_Y),
    Z(GLFW.GLFW_KEY_Z),
    $0(GLFW.GLFW_KEY_0),
    $1(GLFW.GLFW_KEY_1),
    $2(GLFW.GLFW_KEY_2),
    $3(GLFW.GLFW_KEY_3),
    $4(GLFW.GLFW_KEY_4),
    $5(GLFW.GLFW_KEY_5),
    $6(GLFW.GLFW_KEY_6),
    $7(GLFW.GLFW_KEY_7),
    $8(GLFW.GLFW_KEY_8),
    $9(GLFW.GLFW_KEY_9),
    SPACE(GLFW.GLFW_KEY_SPACE),
    APOSTROPHE(GLFW.GLFW_KEY_APOSTROPHE),
    COMMA(GLFW.GLFW_KEY_COMMA),
    MINUS(GLFW.GLFW_KEY_MINUS),
    PERIOD(GLFW.GLFW_KEY_PERIOD),
    SLASH(GLFW.GLFW_KEY_SLASH),
    SEMICOLON(GLFW.GLFW_KEY_SEMICOLON),
    EQUAL(GLFW.GLFW_KEY_EQUAL),
    LEFT_BRACKET(GLFW.GLFW_KEY_LEFT_BRACKET),
    BACKSLASH(GLFW.GLFW_KEY_BACKSLASH),
    RIGHT_BRACKET(GLFW.GLFW_KEY_RIGHT_BRACKET),
    GRAVE_ACCENT(GLFW.GLFW_KEY_GRAVE_ACCENT),
    WORLD_1(GLFW.GLFW_KEY_WORLD_1),
    WORLD_2(GLFW.GLFW_KEY_WORLD_2),
    ESCAPE(GLFW.GLFW_KEY_ESCAPE),
    ENTER(GLFW.GLFW_KEY_ENTER),
    TAB(GLFW.GLFW_KEY_TAB),
    BACKSPACE(GLFW.GLFW_KEY_BACKSPACE),
    INSERT(GLFW.GLFW_KEY_INSERT),
    DELETE(GLFW.GLFW_KEY_DELETE),
    RIGHT(GLFW.GLFW_KEY_RIGHT),
    LEFT(GLFW.GLFW_KEY_LEFT),
    DOWN(GLFW.GLFW_KEY_DOWN),
    UP(GLFW.GLFW_KEY_UP),
    PAGE_UP(GLFW.GLFW_KEY_PAGE_UP),
    PAGE_DOWN(GLFW.GLFW_KEY_PAGE_DOWN),
    HOME(GLFW.GLFW_KEY_HOME),
    END(GLFW.GLFW_KEY_END),
    CAPS_LOCK(GLFW.GLFW_KEY_CAPS_LOCK),
    SCROLL_LOCK(GLFW.GLFW_KEY_SCROLL_LOCK),
    NUM_LOCK(GLFW.GLFW_KEY_NUM_LOCK),
    PRINT_SCREEN(GLFW.GLFW_KEY_PRINT_SCREEN),
    PAUSE(GLFW.GLFW_KEY_PAUSE),
    LEFT_SHIFT(GLFW.GLFW_KEY_LEFT_SHIFT),
    LEFT_CONTROL(GLFW.GLFW_KEY_LEFT_CONTROL),
    LEFT_ALT(GLFW.GLFW_KEY_LEFT_ALT),
    LEFT_SUPER(GLFW.GLFW_KEY_LEFT_SUPER),
    RIGHT_SHIFT(GLFW.GLFW_KEY_RIGHT_SHIFT),
    RIGHT_CONTROL(GLFW.GLFW_KEY_RIGHT_CONTROL),
    RIGHT_ALT(GLFW.GLFW_KEY_RIGHT_ALT),
    RIGHT_SUPER(GLFW.GLFW_KEY_RIGHT_SUPER),
    F1(GLFW.GLFW_KEY_F1),
    F2(GLFW.GLFW_KEY_F2),
    F3(GLFW.GLFW_KEY_F3),
    F4(GLFW.GLFW_KEY_F4),
    F5(GLFW.GLFW_KEY_F5),
    F6(GLFW.GLFW_KEY_F6),
    F7(GLFW.GLFW_KEY_F7),
    F8(GLFW.GLFW_KEY_F8),
    F9(GLFW.GLFW_KEY_F9),
    F10(GLFW.GLFW_KEY_F10),
    F11(GLFW.GLFW_KEY_F11),
    F12(GLFW.GLFW_KEY_F12),
    F13(GLFW.GLFW_KEY_F13),
    F14(GLFW.GLFW_KEY_F14),
    F15(GLFW.GLFW_KEY_F15),
    F16(GLFW.GLFW_KEY_F16),
    F17(GLFW.GLFW_KEY_F17),
    F18(GLFW.GLFW_KEY_F18),
    F19(GLFW.GLFW_KEY_F19),
    F20(GLFW.GLFW_KEY_F20),
    F21(GLFW.GLFW_KEY_F21),
    F22(GLFW.GLFW_KEY_F22),
    F23(GLFW.GLFW_KEY_F23),
    F24(GLFW.GLFW_KEY_F24),
    F25(GLFW.GLFW_KEY_F25),

    //TODO: Add support for all the keys below.
    MOUSE_BUTTON_1(GLFW.GLFW_MOUSE_BUTTON_1),
    MOUSE_BUTTON_2(GLFW.GLFW_MOUSE_BUTTON_2),
    MOUSE_BUTTON_3(GLFW.GLFW_MOUSE_BUTTON_3),
    MOUSE_BUTTON_4(GLFW.GLFW_MOUSE_BUTTON_4),
    MOUSE_BUTTON_5(GLFW.GLFW_MOUSE_BUTTON_5),
    MOUSE_BUTTON_6(GLFW.GLFW_MOUSE_BUTTON_6),
    MOUSE_BUTTON_7(GLFW.GLFW_MOUSE_BUTTON_7),
    MOUSE_BUTTON_8(GLFW.GLFW_MOUSE_BUTTON_8),

    JOYSTICK_1(GLFW.GLFW_JOYSTICK_1),
    JOYSTICK_2(GLFW.GLFW_JOYSTICK_2),
    JOYSTICK_3(GLFW.GLFW_JOYSTICK_3),
    JOYSTICK_4(GLFW.GLFW_JOYSTICK_4),
    JOYSTICK_5(GLFW.GLFW_JOYSTICK_5),
    JOYSTICK_6(GLFW.GLFW_JOYSTICK_6),
    JOYSTICK_7(GLFW.GLFW_JOYSTICK_7),
    JOYSTICK_8(GLFW.GLFW_JOYSTICK_8),
    JOYSTICK_9(GLFW.GLFW_JOYSTICK_9),
    JOYSTICK_10(GLFW.GLFW_JOYSTICK_10),
    JOYSTICK_11(GLFW.GLFW_JOYSTICK_11),
    JOYSTICK_12(GLFW.GLFW_JOYSTICK_12),
    JOYSTICK_13(GLFW.GLFW_JOYSTICK_13),
    JOYSTICK_14(GLFW.GLFW_JOYSTICK_14),
    JOYSTICK_15(GLFW.GLFW_JOYSTICK_15),
    JOYSTICK_16(GLFW.GLFW_JOYSTICK_16),

    GAMEPAD_BUTTON_A(GLFW.GLFW_GAMEPAD_BUTTON_A),
    GAMEPAD_BUTTON_B(GLFW.GLFW_GAMEPAD_BUTTON_B),
    GAMEPAD_BUTTON_X(GLFW.GLFW_GAMEPAD_BUTTON_X),
    GAMEPAD_BUTTON_Y(GLFW.GLFW_GAMEPAD_BUTTON_Y),
    GAMEPAD_BUTTON_LEFT_BUMPER(GLFW.GLFW_GAMEPAD_BUTTON_LEFT_BUMPER),
    GAMEPAD_BUTTON_RIGHT_BUMPER(GLFW.GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER),
    GAMEPAD_BUTTON_BACK(GLFW.GLFW_GAMEPAD_BUTTON_BACK),
    GAMEPAD_BUTTON_START(GLFW.GLFW_GAMEPAD_BUTTON_START),
    GAMEPAD_BUTTON_GUIDE(GLFW.GLFW_GAMEPAD_BUTTON_GUIDE),
    GAMEPAD_BUTTON_LEFT_THUMB(GLFW.GLFW_GAMEPAD_BUTTON_LEFT_THUMB),
    GAMEPAD_BUTTON_RIGHT_THUMB(GLFW.GLFW_GAMEPAD_BUTTON_RIGHT_THUMB),
    GAMEPAD_BUTTON_DPAD_UP(GLFW.GLFW_GAMEPAD_BUTTON_DPAD_UP),
    GAMEPAD_BUTTON_DPAD_RIGHT(GLFW.GLFW_GAMEPAD_BUTTON_DPAD_RIGHT),
    GAMEPAD_BUTTON_DPAD_DOWN(GLFW.GLFW_GAMEPAD_BUTTON_DPAD_DOWN),
    GAMEPAD_BUTTON_DPAD_LEFT(GLFW.GLFW_GAMEPAD_BUTTON_DPAD_LEFT);

    private final String normalName;
    private final int keyCode;

    GlfwKeyName(final int keyCode) {
        this.normalName = this.normalizeName(this.name());
        this.keyCode = keyCode;
    }

    @Override
    public String normalName() {
        return this.normalName;
    }

    public int getKeyCode() {
        return this.keyCode;
    }

    public static GlfwKeyName getGlfwKeyNameByKeyCode(final int keyCode) {
        for (final GlfwKeyName keyName : GlfwKeyName.values()) {
            if (keyName.getKeyCode() == keyCode) {
                return keyName;
            }
        }
        return UNKNOWN;
    }

    public static GlfwKeyName getGlfwKeyNameByName(final String name) {
        for (final GlfwKeyName keyName : GlfwKeyName.values()) {
            if (keyName.normalName().equalsIgnoreCase(name)) {
                return keyName;
            }
        }
        return UNKNOWN;
    }

}