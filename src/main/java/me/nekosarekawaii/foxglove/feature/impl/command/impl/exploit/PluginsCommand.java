package me.nekosarekawaii.foxglove.feature.impl.command.impl.exploit;

import com.mojang.brigadier.arguments.BoolArgumentType;
import com.mojang.brigadier.arguments.LongArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.suggestion.Suggestion;
import de.florianmichael.dietrichevents2.DietrichEvents2;
import joptsimple.internal.Strings;
import me.nekosarekawaii.foxglove.event.impl.PacketListener;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.command.Command;
import me.nekosarekawaii.foxglove.feature.impl.command.CommandInfo;
import me.nekosarekawaii.foxglove.util.RunnableScheduleUtils;
import me.nekosarekawaii.foxglove.util.minecraft.ChatUtils;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.command.CommandSource;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;
import net.minecraft.util.Formatting;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@CommandInfo(name = "Plugins", aliases = {"plugins", "getplugins", "viewplugins", "showplugins", "displayplugins", "pl"}, description = "Tries to display the plugins that are installed on the server.", category = FeatureCategory.EXPLOIT)
public class PluginsCommand extends Command implements PacketListener {

    private boolean running, received = false;

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder
                .then(argument("bukkit-prefix", BoolArgumentType.bool())
                        .then(argument("check-time", LongArgumentType.longArg(500, 15000))
                                .then(literal("about")
                                        .executes(context -> {
                                            this.sendPacket("about", context.getArgument("bukkit-prefix", Boolean.class), context.getArgument("check-time", Long.class));
                                            return SINGLE_SUCCESS;
                                        })
                                )
                                .then(literal("version")
                                        .executes(context -> {
                                            this.sendPacket("version", context.getArgument("bukkit-prefix", Boolean.class), context.getArgument("check-time", Long.class));
                                            return SINGLE_SUCCESS;
                                        })
                                )
                                .then(literal("ver")
                                        .executes(context -> {
                                            this.sendPacket("ver", context.getArgument("bukkit-prefix", Boolean.class), context.getArgument("check-time", Long.class));
                                            return SINGLE_SUCCESS;
                                        })
                                )
                                .then(literal("?")
                                        .executes(context -> {
                                            this.sendPacket("?", context.getArgument("bukkit-prefix", Boolean.class), context.getArgument("check-time", Long.class));
                                            return SINGLE_SUCCESS;
                                        })
                                )
                                .then(literal("normal")
                                        .executes(context -> {
                                            this.sendPacket("", false, context.getArgument("check-time", Long.class));
                                            return SINGLE_SUCCESS;
                                        })
                                )
                        ));
    }

    private void sendPacket(final String command, final boolean bukkitPrefix, final long checkTime) {
        if (this.running) {
            ChatUtils.errorChatMessage("Plugins check already running!");
            return;
        }
        this.running = true;
        this.received = false;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        if (networkHandler == null) return;
        DietrichEvents2.global().subscribe(PacketEvent.ID, this);
        RunnableScheduleUtils.scheduleRunnableWithDelay(() -> {
            DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
            this.running = false;
            if (!this.received) ChatUtils.errorChatMessage("Plugins check timed out!");
        }, checkTime);
        networkHandler.sendPacket(new RequestCommandCompletionsC2SPacket(networkHandler.getCommandSource().completionId + 1, "/" + (bukkitPrefix ? "bukkit:" : "") + command + (command.isEmpty() ? "" : " ")));
    }

    @Override
    public void onRead(final PacketEvent event) {
        if (event.isCancelled()) return;
        if (event.packet instanceof final CommandSuggestionsS2CPacket commandSuggestionsS2CPacket) {
            final List<Suggestion> list = commandSuggestionsS2CPacket.getSuggestions().getList();
            if (!list.isEmpty()) {
                this.received = true;
                final List<String> plugins = new ArrayList<>();
                for (final Suggestion entry : list) {
                    String pluginName = entry.getText();
                    boolean cantAdd = true;
                    if (pluginName.contains("/")) pluginName = pluginName.replace("/", "");
                    if (pluginName.contains(":")) {
                        final String[] commandData = pluginName.split(":");
                        if (commandData.length > 1) {
                            pluginName = commandData[0];
                            cantAdd = false;
                        }
                    } else if (Character.isUpperCase(pluginName.charAt(0))) {
                        cantAdd = false;
                    }
                    if (!cantAdd && !plugins.contains(pluginName)) plugins.add(pluginName);
                }
                if (!plugins.isEmpty()) {
                    Collections.sort(plugins);
                    ChatUtils.infoChatMessage(Formatting.WHITE + "Plugins (" + plugins.size() + "): " + Formatting.GREEN + Strings.join(plugins.toArray(String[]::new), Formatting.WHITE + ", " + Formatting.GREEN));
                } else ChatUtils.errorChatMessage("No Plugins found!");
            }
        }
    }

}
