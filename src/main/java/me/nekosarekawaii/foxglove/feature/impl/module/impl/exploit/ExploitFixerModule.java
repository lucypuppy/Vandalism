package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.event.EventPriorities;
import me.nekosarekawaii.foxglove.event.impl.PacketListener;
import me.nekosarekawaii.foxglove.event.impl.TickListener;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.module.Module;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleInfo;
import me.nekosarekawaii.foxglove.util.minecraft.ChatUtils;
import me.nekosarekawaii.foxglove.util.timer.impl.ms.MsTimer;
import me.nekosarekawaii.foxglove.value.Value;
import me.nekosarekawaii.foxglove.value.values.BooleanValue;
import me.nekosarekawaii.foxglove.value.values.number.slider.SliderFloatValue;
import me.nekosarekawaii.foxglove.value.values.number.slider.SliderIntegerValue;
import net.minecraft.block.EndPortalBlock;
import net.minecraft.client.gui.screen.CreditsScreen;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerInteractionManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.network.packet.s2c.play.CloseScreenS2CPacket;
import net.minecraft.network.packet.s2c.play.ExplosionS2CPacket;
import net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket;
import net.minecraft.network.packet.s2c.play.ParticleS2CPacket;
import net.minecraft.util.math.MathHelper;

@ModuleInfo(name = "Exploit Fixer", description = "Fixes various exploits.", category = FeatureCategory.EXPLOIT, isExperimental = true)
public class ExploitFixerModule extends Module implements PacketListener, TickListener {

    public final String correctTextureUrlStart = "http://textures.minecraft.net/texture/";

    public final Value<Boolean> blockInvalidTextureUrls = new BooleanValue(
            "Block invalid texture URL's",
            "Blocks all incoming textures that are not from " + this.correctTextureUrlStart,
            this,
            true
    );

    private final Value<Boolean> blockTooHeavyExplosions = new BooleanValue(
            "Block too heavy explosions",
            "Blocks particles when their count is too high.",
            this,
            true
    );

    private final Value<Integer> maxAffectedBlocksCount = new SliderIntegerValue(
            "Max affected blocks count to block a explosion",
            "Set the count of affected blocks to block a explosion.",
            this,
            500,
            50,
            1000
    ).visibleConsumer(this.blockTooHeavyExplosions::getValue);

    private final Value<Float> maxRadius = new SliderFloatValue(
            "Max radius to block a explosion",
            "Set the radius to block a explosion.",
            this,
            500f,
            50f,
            1000f
    ).visibleConsumer(this.blockTooHeavyExplosions::getValue);

    private final Value<Integer> countToBlockExplosionSpamm = new SliderIntegerValue(
            "Count to block explosion spamm",
            "Set the count to block a explosion spamm.",
            this,
            3,
            3,
            10
    ).visibleConsumer(this.blockTooHeavyExplosions::getValue);

    private final Value<Integer> timeToResetExplosionSpammCounter = new SliderIntegerValue(
            "Time to reset the explosion spamm counter",
            "Resets the explosion spamm counter.",
            this,
            200,
            100,
            15000
    ).visibleConsumer(this.blockTooHeavyExplosions::getValue);

    private final Value<Boolean> blockTooManyParticles = new BooleanValue(
            "Block too many particles",
            "Blocks particles when their count is too high.",
            this,
            true
    );

    private final Value<Integer> countToBlockParticles = new SliderIntegerValue(
            "Count to block particles",
            "Set the count to block the particles.",
            this,
            500,
            50,
            1000
    ).visibleConsumer(this.blockTooManyParticles::getValue);

    private final Value<Boolean> blockServerScreenClose = new BooleanValue(
            "Block server screen close",
            "Blocks the server screen close packet.",
            this,
            true
    );

    private final Value<Boolean> blockGameStateFeatures = new BooleanValue(
            "Block game state features",
            "Blocks various game state packet features (like the demo screen).",
            this,
            true
    );

    private final Value<Boolean> blockDemoScreen = new BooleanValue(
            "Block demo screen",
            "Blocks the demo screen.",
            this,
            true
    ).visibleConsumer(this.blockGameStateFeatures::getValue);

    private final Value<Boolean> blockFakeGameWon = new BooleanValue(
            "Block fake game won",
            "Prevents the server from sending you a clientside game won (credits screen).",
            this,
            true
    ).visibleConsumer(this.blockGameStateFeatures::getValue);

    private final Value<Boolean> blockTerrainDownloadSpamm = new BooleanValue(
            "Block terrain download spamm",
            "Prevents the server from spamming the download terrain screen to you.",
            this,
            true
    ).visibleConsumer(this.blockGameStateFeatures::getValue);

    private final Value<Integer> countToBlockTerrainDownload = new SliderIntegerValue(
            "Count to block terrain download",
            "Set the count to block the download terrain screen.",
            this,
            3,
            3,
            10
    ).visibleConsumer(this.blockTerrainDownloadSpamm::getValue);

    private final Value<Integer> timeToResetTerrainDownloadSpammCounter = new SliderIntegerValue(
            "Time to reset terrain download spamm counter",
            "Resets the terrain download spamm counter.",
            this,
            200,
            100,
            15000
    ).visibleConsumer(this.blockTerrainDownloadSpamm::getValue);

    private final Value<Boolean> blockDemoTutorial = new BooleanValue(
            "Block demo tutorial",
            "Blocks the demo tutorial notifications.",
            this,
            true
    ).visibleConsumer(this.blockGameStateFeatures::getValue);

    private final Value<Boolean> blockElderGuardianEffectSpamm = new BooleanValue(
            "Block elder guardian effect spamm",
            "Prevents the server from spamming the elder guardian effect to you.",
            this,
            true
    ).visibleConsumer(this.blockGameStateFeatures::getValue);

    private final Value<Integer> countToBlockElderGuardianEffect = new SliderIntegerValue(
            "Count to block elder guardian effect",
            "Set the count to block the elder guardian effect.",
            this,
            3,
            3,
            10
    ).visibleConsumer(this.blockElderGuardianEffectSpamm::getValue);

    private final Value<Integer> timeToResetElderGuardianEffectSpammCounter = new SliderIntegerValue(
            "Time to reset elder guardian effect spamm counter",
            "Resets the elder guardian effect spamm counter.",
            this,
            200,
            100,
            15000
    ).visibleConsumer(this.blockElderGuardianEffectSpamm::getValue);

    private final MsTimer terrainSpammResetTimer = new MsTimer(), elderGuardianSpammResetTimer = new MsTimer(), explosionSpammResetTimer = new MsTimer();
    private int terrainSpammCounter = 0, elderGuardianEffectSpammCounter = 0, explosionSpammCounter = 0;

    @Override
    public void onTick() {
        if (mc.player == null || mc.world == null) {
            this.resetAll();
            return;
        }
        if (this.terrainSpammCounter != 0 && this.terrainSpammResetTimer.hasReached(this.timeToResetTerrainDownloadSpammCounter.getValue(), true)) {
            this.terrainSpammCounter = 0;
        }
        if (this.elderGuardianEffectSpammCounter != 0 && this.elderGuardianSpammResetTimer.hasReached(this.timeToResetElderGuardianEffectSpammCounter.getValue(), true)) {
            this.elderGuardianEffectSpammCounter = 0;
        }
        if (this.explosionSpammCounter != 0 && this.explosionSpammResetTimer.hasReached(this.timeToResetExplosionSpammCounter.getValue(), true)) {
            this.explosionSpammCounter = 0;
        }
    }

    @Override
    protected void onEnable() {
        this.resetAll();
        DietrichEvents2.global().subscribe(PacketEvent.ID, this, EventPriorities.HIGHEST.getPriority());
        DietrichEvents2.global().subscribe(TickEvent.ID, this, EventPriorities.HIGHEST.getPriority());
    }

    @Override
    protected void onDisable() {
        DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
        this.resetAll();
    }

    private void resetAll() {
        this.terrainSpammCounter = 0;
        this.elderGuardianEffectSpammCounter = 0;
        this.explosionSpammCounter = 0;
    }

    @Override
    public void onRead(final PacketEvent event) {
        final ClientPlayerEntity player = mc.player;
        final ClientWorld world = mc.world;
        final ClientPlayerInteractionManager interactionManager = mc.interactionManager;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        if (event.isCancelled() || player == null || world == null || interactionManager == null || networkHandler == null)
            return;
        if (event.packet instanceof final ExplosionS2CPacket explosionS2CPacket) {
            if (this.blockTooHeavyExplosions.getValue()) {
                final int affectedBlocks = explosionS2CPacket.getAffectedBlocks().size();
                if (affectedBlocks >= this.maxAffectedBlocksCount.getValue()) {
                    event.cancel();
                    ChatUtils.warningChatMessage("Blocked too many affected explosion blocks > " + affectedBlocks);
                }
                if (!event.isCancelled()) {
                    final float radius = explosionS2CPacket.getRadius();
                    if (radius >= this.maxRadius.getValue()) {
                        event.cancel();
                        ChatUtils.warningChatMessage("Blocked too heavy explosion radius > " + radius);
                    }
                }
                if (!event.isCancelled()) {
                    this.explosionSpammCounter++;
                    if (this.explosionSpammCounter >= this.countToBlockExplosionSpamm.getValue()) {
                        event.cancel();
                        ChatUtils.warningChatMessage("Blocked explosion spamm.");
                    }
                }
            }
        } else if (event.packet instanceof final ParticleS2CPacket particleS2CPacket) {
            if (this.blockTooManyParticles.getValue()) {
                final int count = particleS2CPacket.getCount();
                if (count >= this.countToBlockParticles.getValue()) {
                    event.cancel();
                    ChatUtils.warningChatMessage("Blocked too many particles > " + count);
                }
            }
        } else if (event.packet instanceof CloseScreenS2CPacket) {
            if (this.blockServerScreenClose.getValue()) {
                event.cancel();
                ChatUtils.warningChatMessage("Blocked screen close.");
            }
        } else if (event.packet instanceof final GameStateChangeS2CPacket gameStateChangeS2CPacket) {
            if (this.blockGameStateFeatures.getValue()) {
                final GameStateChangeS2CPacket.Reason reason = gameStateChangeS2CPacket.getReason();
                final float f = gameStateChangeS2CPacket.getValue();
                final int i = MathHelper.floor(f + 0.5f);
                if (reason == GameStateChangeS2CPacket.GAME_WON) {
                    if (i == 0) {
                        if (this.blockTerrainDownloadSpamm.getValue()) {
                            this.terrainSpammCounter++;
                            if (this.terrainSpammCounter >= this.countToBlockTerrainDownload.getValue()) {
                                event.cancel();
                                ChatUtils.warningChatMessage("Blocked download terrain spamm.");
                            }
                        }
                    } else if (i == 1) {
                        //TODO: Add better check.
                        if (this.blockFakeGameWon.getValue()) {
                            if (mc.currentScreen instanceof CreditsScreen || !(world.getBlockState(player.getBlockPos().down()).getBlock() instanceof EndPortalBlock)) {
                                event.cancel();
                                ChatUtils.warningChatMessage("Blocked fake Game won.");
                            }
                        }
                    }
                } else if (reason == GameStateChangeS2CPacket.DEMO_MESSAGE_SHOWN) {
                    if (f == GameStateChangeS2CPacket.DEMO_OPEN_SCREEN) {
                        if (this.blockDemoScreen.getValue()) {
                            event.cancel();
                            ChatUtils.warningChatMessage("Blocked Demo Screen.");
                        }
                    } else {
                        final boolean
                                movementHelp = f == GameStateChangeS2CPacket.DEMO_MOVEMENT_HELP, jumpHelp = f == GameStateChangeS2CPacket.DEMO_JUMP_HELP,
                                inventoryHelp = f == GameStateChangeS2CPacket.DEMO_INVENTORY_HELP, expiryNotice = f == GameStateChangeS2CPacket.DEMO_EXPIRY_NOTICE;
                        if (movementHelp || jumpHelp || inventoryHelp || expiryNotice) {
                            if (this.blockDemoTutorial.getValue()) {
                                event.cancel();
                                ChatUtils.warningChatMessage("Blocked Demo Tutorial > " + (movementHelp ? "Movement Help" : jumpHelp ? "Jump Help" : inventoryHelp ? "Inventory Help" : "Expiry Notice"));
                            }
                        }
                    }
                } else if (reason == GameStateChangeS2CPacket.ELDER_GUARDIAN_EFFECT) {
                    if (this.blockElderGuardianEffectSpamm.getValue()) {
                        this.elderGuardianEffectSpammCounter++;
                        if (this.elderGuardianEffectSpammCounter >= this.countToBlockElderGuardianEffect.getValue()) {
                            event.cancel();
                            ChatUtils.warningChatMessage("Blocked Elder Guardian Effect spamm.");
                        }
                    }
                }
            }
        }
    }

}
