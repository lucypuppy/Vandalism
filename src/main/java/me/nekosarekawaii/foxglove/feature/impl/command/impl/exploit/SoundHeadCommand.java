package me.nekosarekawaii.foxglove.feature.impl.command.impl.exploit;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.command.Command;
import me.nekosarekawaii.foxglove.feature.impl.command.CommandInfo;
import me.nekosarekawaii.foxglove.feature.impl.command.arguments.SoundArgumentType;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.command.CommandSource;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.sound.SoundEvent;

@CommandInfo(name = "Sound Head", description = "Gives you an head which allows you to play sounds with note blocks.", aliases = {"soundhead", "soundskull", "skullsound", "headsound"}, category = FeatureCategory.EXPLOIT)
public class SoundHeadCommand extends Command {

    @Override
    public void build(final LiteralArgumentBuilder<CommandSource> builder) {
        builder.then(argument("sound", SoundArgumentType.create()).executes(context -> {
            final ClientPlayerEntity player = mc.player;
            final ClientPlayNetworkHandler handler = mc.getNetworkHandler();
            if (player != null && handler != null) {
                if (!player.getAbilities().creativeMode) throw notInCreativeMode.create();
                final int emptySlot = player.getInventory().getEmptySlot();
                if (emptySlot == -1 || emptySlot > 8) throw notSpaceInHotBar.create();
                final ItemStack item = new ItemStack(Items.PLAYER_HEAD);
                final NbtCompound nbt = new NbtCompound();
                final NbtCompound blockEntityTag = new NbtCompound();
                blockEntityTag.putString("note_block_sound", context.getArgument("sound", SoundEvent.class).getId().getPath());
                nbt.put("BlockEntityTag", blockEntityTag);
                item.setNbt(nbt);
                handler.sendPacket(new CreativeInventoryActionC2SPacket(36 + emptySlot, item));
            }
            return singleSuccess;
        }));
    }

}
