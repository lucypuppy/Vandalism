plugins {
    id "base"
    id "vandalism.fabric-conventions"
}

base {
    archivesName = project.maven_name
}

loom {
    accessWidenerPath = file("src/main/resources/" + maven_name.toLowerCase() + ".accesswidener")
}

dependencies {
    modJij "de.florianmichael:AsmFabricLoader:${project.asmfabricloader_version}"
    jij "de.florianmichael:DietrichEvents2:${project.dietrichevents2_version}"
    jij "de.florianmichael:WaybackAuthLib:${project.waybackauthlib_version}"

    jij "net.lenni0451:MCPing:${project.mc_ping_version}"
    jij "net.lenni0451:Reflect:${project.reflect_version}"

    jij "io.github.spair:imgui-java-binding:${project.spair_imgui_version}"
    jij("io.github.spair:imgui-java-lwjgl3:${project.spair_imgui_version}") {
        exclude module: "lwjgl"
        exclude module: "lwjgl-glfw"
        exclude module: "lwjgl-opengl"
        exclude module: "lwjgl-bom"
    }
    jij "io.github.spair:imgui-java-natives-macos:${project.spair_imgui_version}"
    jij "io.github.spair:imgui-java-natives-windows:${project.spair_imgui_version}"
    jij "io.github.spair:imgui-java-natives-linux:${project.spair_imgui_version}"

    jij "net.raphimc:NoteBlockLib:${project.noteblocklib_version}"
    jij "net.raphimc:MinecraftAuth:${project.minecraftauth_version}"

    // Fabric's jar in jar system doesn't support transitive dependencies, so we have to manually add them
    afterEvaluate {
        configurations.jij.incoming.resolutionResult.allDependencies {
            dependencies.include(dependencies.implementation(dependencies.compileOnlyApi(requested.toString())))
        }
    }
}
